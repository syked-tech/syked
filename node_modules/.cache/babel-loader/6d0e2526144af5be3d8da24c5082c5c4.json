{"ast":null,"code":"import { call, put, takeLatest, select } from 'redux-saga/effects'; // import { Auth } from 'aws-amplify';\n\nimport { push } from 'connected-react-router'; // import { reset } from 'redux-form';\n\nimport axios from 'axios';\nimport * as AuthSlice from 'containers/Auth/authSlice'; // import * as UserSlice from 'containers/Users/usersSlice';\n\nimport * as ROUTES from 'common/constants';\nimport * as API from 'common/api';\nimport { enqueueSnackbar as enqueueSnackbarAction // closeSnackbar as closeSnackbarAction,\n} from 'components/Notifier/actions'; // import { redirectSignin } from 'common/redirects';\n// const hostname = window && window.location && window.location.hostname;\n\nexport function* signIn(actions) {\n  const {\n    Username,\n    Password\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.signIn(Username, Password); // yield put(AuthSlice.signInSuccess(authResponse));\n\n    const {\n      challengeName\n    } = authResponse;\n\n    switch (challengeName && challengeName.value) {\n      case 'NEW_PASSWORD_REQUIRED':\n        {\n          // yield put(push(`/change/${encodeURIComponent(Username)}`));\n          return;\n        }\n\n      default:\n        {\n          yield call(loginSuccessSaga, authResponse);\n          yield put(enqueueSnackbarAction({\n            message: 'Signed in successfully',\n            options: {\n              key: new Date().getTime() + Math.random(),\n              variant: 'success',\n              action: () => null\n            }\n          }));\n        }\n    }\n  } catch (error) {\n    yield put(AuthSlice.signInFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* signUp(actions) {\n  const {\n    name,\n    surname,\n    email,\n    password\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.signUp({\n      username: email,\n      password,\n      attributes: {\n        email,\n        name,\n        family_name: surname,\n        profile: 'test-profile',\n        preferred_username: 'test-profile'\n      }\n    });\n    yield put(AuthSlice.signUpSuccess(authResponse));\n    yield put(push(`${ROUTES.SIGNUP}/${encodeURIComponent(email)}`));\n    yield put(enqueueSnackbarAction({\n      message: `Confirmation email successfully sent to ${email}`,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.signUpFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* confirmSignUp(actions) {\n  const {\n    email,\n    confirmationCode\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.confirmSignUp(email, confirmationCode);\n    yield put(AuthSlice.confirmSignUpSuccess(authResponse));\n    yield put(push(ROUTES.SIGNIN));\n    yield put(enqueueSnackbarAction({\n      message: 'User confirmed successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.confirmSignUpFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* loginSuccessSaga(data) {\n  const {\n    signInUserSession\n  } = data;\n  const {\n    payload\n  } = signInUserSession.idToken;\n\n  switch (payload['cognito:groups'][0]) {\n    case 'SuperAdmin':\n      {\n        // yield put(push(`/r/${encodeURIComponent(redirectSignin(hostname))}`));\n        return;\n      }\n\n    case 'Admin':\n      {\n        // const uri = `${redirectSignin(hostname)}/${payload.profile}${ROUTES.DASHBOARD}`;\n        // yield put(push(`/r/${encodeURIComponent(uri)}`));\n        return;\n      }\n\n    case 'Consultant':\n      {\n        // const uri = `${redirectSignin(hostname)}/${payload.profile}${ROUTES.DASHBOARD}`;\n        // yield put(push(`/r/${encodeURIComponent(uri)}`));\n        return;\n      }\n    // TODO: Error page, user\n\n    default:\n      {\n        yield put(push(ROUTES.ROOT));\n      }\n  }\n}\nexport function* resetPassword(actions) {\n  const {\n    Username\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPassword(Username);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse));\n    yield put(push(`${ROUTES.FORGOT_PASSWORD}/${encodeURIComponent(Username)}`));\n  } catch (error) {\n    yield put(AuthSlice.resetPasswordFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* confirmPassword(actions) {\n  const {\n    Username,\n    SessionCode,\n    NewPassword\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPasswordSubmit(Username, SessionCode, NewPassword);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse));\n    yield put(push(ROUTES.SIGNIN));\n    yield put(enqueueSnackbarAction({\n      message: 'Password changed successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.confirmPasswordFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* changePassword(actions) {\n  // console.log(actions);\n  const {\n    OldPassword,\n    NewPassword,\n    isAccount\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const user = yield Auth.currentAuthenticatedUser(); // eslint-disable-next-line no-undef\n\n    const authResponse = yield Auth.changePassword(user, OldPassword, NewPassword);\n    yield put(AuthSlice.changePasswordSuccess(authResponse));\n\n    if (!isAccount) {\n      yield put(push(ROUTES.SIGNIN));\n    }\n\n    yield put(enqueueSnackbarAction({\n      message: 'Password changed successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.changePasswordFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* updateUserAttributes(actions) {\n  const {\n    idToken\n  } = yield select(AuthSlice.selectUserSession);\n  const username = actions.payload['cognito:username']; // console.log(attributes);\n\n  const options = {\n    url: `${API.USERS_API}/${username}`,\n    method: 'put',\n    headers: {\n      Authorization: idToken.jwtToken\n    },\n    data: actions.payload\n  };\n\n  try {\n    const authResponse = yield call(axios, options); // console.log(authResponse);\n    // const user = yield Auth.currentAuthenticatedUser();\n    // const authResponse = yield Auth.updateUserAttributes(user, {\n    //   name,\n    //   family_name,\n    // });\n    // const currentSession = yield Auth.currentSession();\n    // yield put(AuthSlice.userSession(currentSession));\n\n    yield put(AuthSlice.updateUserAttributesSuccess(authResponse));\n    yield put(enqueueSnackbarAction({\n      message: 'Account updated successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.updateUserAttributesFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* validateInvite(actions) {\n  const options = {\n    url: API.VALIDATE_USER_INVITE_API,\n    method: 'post',\n    data: actions.payload\n  };\n\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.validateInviteSuccess(authResponse.data.data)); // yield put(push(ROUTES.CUSTOMERS));\n\n    yield put(enqueueSnackbarAction({\n      message: authResponse.data.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.validateInviteFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* deactivateUser(actions) {\n  const {\n    idToken\n  } = yield select(AuthSlice.selectUserSession);\n  const {\n    Username\n  } = actions.payload;\n  const options = {\n    url: `${API.USERS_API}/${Username}/deactivate`,\n    method: 'delete',\n    headers: {\n      Authorization: idToken.jwtToken\n    }\n  };\n\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.deactivateUserSuccess(authResponse.data.data));\n    yield put(enqueueSnackbarAction({\n      message: authResponse.data.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    })); // yield put(UserSlice.retrieveUsers({ customerid }));\n  } catch (error) {\n    yield put(AuthSlice.deactivateUserFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport default function* userSaga() {\n  yield takeLatest(AuthSlice.signIn.type, signIn);\n  yield takeLatest(AuthSlice.signUp.type, signUp);\n  yield takeLatest(AuthSlice.confirmSignUp.type, confirmSignUp);\n  yield takeLatest(AuthSlice.resetPassword.type, resetPassword);\n  yield takeLatest(AuthSlice.confirmPassword.type, confirmPassword);\n  yield takeLatest(AuthSlice.changePassword.type, changePassword);\n  yield takeLatest(AuthSlice.validateInvite.type, validateInvite);\n  yield takeLatest(AuthSlice.updateUserAttributes.type, updateUserAttributes);\n  yield takeLatest(AuthSlice.deactivateUser.type, deactivateUser);\n}","map":{"version":3,"sources":["/Users/lasimonne/Projects/syked.xyz/src/containers/Auth/saga.js"],"names":["call","put","takeLatest","select","push","axios","AuthSlice","ROUTES","API","enqueueSnackbar","enqueueSnackbarAction","signIn","actions","Username","Password","payload","authResponse","Auth","challengeName","value","loginSuccessSaga","message","options","key","Date","getTime","Math","random","variant","action","error","signInFailed","signUp","name","surname","email","password","username","attributes","family_name","profile","preferred_username","signUpSuccess","SIGNUP","encodeURIComponent","signUpFailed","confirmSignUp","confirmationCode","confirmSignUpSuccess","SIGNIN","confirmSignUpFailed","data","signInUserSession","idToken","ROOT","resetPassword","forgotPassword","resetPasswordSuccess","FORGOT_PASSWORD","resetPasswordFailed","confirmPassword","SessionCode","NewPassword","forgotPasswordSubmit","confirmPasswordFailed","changePassword","OldPassword","isAccount","user","currentAuthenticatedUser","changePasswordSuccess","changePasswordFailed","updateUserAttributes","selectUserSession","url","USERS_API","method","headers","Authorization","jwtToken","updateUserAttributesSuccess","updateUserAttributesFailed","validateInvite","VALIDATE_USER_INVITE_API","validateInviteSuccess","validateInviteFailed","deactivateUser","deactivateUserSuccess","deactivateUserFailed","userSaga","type"],"mappings":"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","sourcesContent":["import { call, put, takeLatest, select } from 'redux-saga/effects';\n// import { Auth } from 'aws-amplify';\nimport { push } from 'connected-react-router';\n// import { reset } from 'redux-form';\nimport axios from 'axios';\nimport * as AuthSlice from 'containers/Auth/authSlice';\n// import * as UserSlice from 'containers/Users/usersSlice';\nimport * as ROUTES from 'common/constants';\nimport * as API from 'common/api';\nimport {\n  enqueueSnackbar as enqueueSnackbarAction,\n  // closeSnackbar as closeSnackbarAction,\n} from 'components/Notifier/actions';\n// import { redirectSignin } from 'common/redirects';\n\n// const hostname = window && window.location && window.location.hostname;\n\nexport function* signIn(actions) {\n  const { Username, Password } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.signIn(Username, Password);\n    // yield put(AuthSlice.signInSuccess(authResponse));\n\n    const { challengeName } = authResponse;\n    switch (challengeName && challengeName.value) {\n      case 'NEW_PASSWORD_REQUIRED': {\n        // yield put(push(`/change/${encodeURIComponent(Username)}`));\n        return;\n      }\n      default: {\n        yield call(loginSuccessSaga, authResponse);\n        yield put(\n          enqueueSnackbarAction({\n            message: 'Signed in successfully',\n            options: {\n              key: new Date().getTime() + Math.random(),\n              variant: 'success',\n              action: () => null,\n            },\n          }),\n        );\n      }\n    }\n  } catch (error) {\n    yield put(AuthSlice.signInFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* signUp(actions) {\n  const { name, surname, email, password } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.signUp({\n      username: email,\n      password,\n      attributes: {\n        email,\n        name,\n        family_name: surname,\n        profile: 'test-profile',\n        preferred_username: 'test-profile',\n      },\n    });\n    yield put(AuthSlice.signUpSuccess(authResponse));\n    yield put(push(`${ROUTES.SIGNUP}/${encodeURIComponent(email)}`));\n    yield put(\n      enqueueSnackbarAction({\n        message: `Confirmation email successfully sent to ${email}`,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.signUpFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* confirmSignUp(actions) {\n  const { email, confirmationCode } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.confirmSignUp(email, confirmationCode);\n    yield put(AuthSlice.confirmSignUpSuccess(authResponse));\n    yield put(push(ROUTES.SIGNIN));\n    yield put(\n      enqueueSnackbarAction({\n        message: 'User confirmed successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.confirmSignUpFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* loginSuccessSaga(data) {\n  const { signInUserSession } = data;\n  const { payload } = signInUserSession.idToken;\n\n  switch (payload['cognito:groups'][0]) {\n    case 'SuperAdmin': {\n      // yield put(push(`/r/${encodeURIComponent(redirectSignin(hostname))}`));\n\n      return;\n    }\n    case 'Admin': {\n      // const uri = `${redirectSignin(hostname)}/${payload.profile}${ROUTES.DASHBOARD}`;\n      // yield put(push(`/r/${encodeURIComponent(uri)}`));\n\n      return;\n    }\n    case 'Consultant': {\n      // const uri = `${redirectSignin(hostname)}/${payload.profile}${ROUTES.DASHBOARD}`;\n      // yield put(push(`/r/${encodeURIComponent(uri)}`));\n\n      return;\n    }\n    // TODO: Error page, user\n    default: {\n      yield put(push(ROUTES.ROOT));\n    }\n  }\n}\n\nexport function* resetPassword(actions) {\n  const { Username } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPassword(Username);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse));\n    yield put(push(`${ROUTES.FORGOT_PASSWORD}/${encodeURIComponent(Username)}`));\n  } catch (error) {\n    yield put(AuthSlice.resetPasswordFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* confirmPassword(actions) {\n  const { Username, SessionCode, NewPassword } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPasswordSubmit(Username, SessionCode, NewPassword);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse));\n    yield put(push(ROUTES.SIGNIN));\n    yield put(\n      enqueueSnackbarAction({\n        message: 'Password changed successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.confirmPasswordFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* changePassword(actions) {\n  // console.log(actions);\n  const { OldPassword, NewPassword, isAccount } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const user = yield Auth.currentAuthenticatedUser();\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.changePassword(user, OldPassword, NewPassword);\n    yield put(AuthSlice.changePasswordSuccess(authResponse));\n    if (!isAccount) {\n      yield put(push(ROUTES.SIGNIN));\n    }\n    yield put(\n      enqueueSnackbarAction({\n        message: 'Password changed successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.changePasswordFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* updateUserAttributes(actions) {\n  const { idToken } = yield select(AuthSlice.selectUserSession);\n  const username = actions.payload['cognito:username'];\n  // console.log(attributes);\n\n  const options = {\n    url: `${API.USERS_API}/${username}`,\n    method: 'put',\n    headers: {\n      Authorization: idToken.jwtToken,\n    },\n    data: actions.payload,\n  };\n\n  try {\n    const authResponse = yield call(axios, options);\n    // console.log(authResponse);\n    // const user = yield Auth.currentAuthenticatedUser();\n    // const authResponse = yield Auth.updateUserAttributes(user, {\n    //   name,\n    //   family_name,\n    // });\n    // const currentSession = yield Auth.currentSession();\n    // yield put(AuthSlice.userSession(currentSession));\n    yield put(AuthSlice.updateUserAttributesSuccess(authResponse));\n    yield put(\n      enqueueSnackbarAction({\n        message: 'Account updated successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.updateUserAttributesFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* validateInvite(actions) {\n  const options = {\n    url: API.VALIDATE_USER_INVITE_API,\n    method: 'post',\n    data: actions.payload,\n  };\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.validateInviteSuccess(authResponse.data.data));\n    // yield put(push(ROUTES.CUSTOMERS));\n    yield put(\n      enqueueSnackbarAction({\n        message: authResponse.data.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.validateInviteFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* deactivateUser(actions) {\n  const { idToken } = yield select(AuthSlice.selectUserSession);\n  const { Username } = actions.payload;\n  const options = {\n    url: `${API.USERS_API}/${Username}/deactivate`,\n    method: 'delete',\n    headers: {\n      Authorization: idToken.jwtToken,\n    },\n  };\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.deactivateUserSuccess(authResponse.data.data));\n    yield put(\n      enqueueSnackbarAction({\n        message: authResponse.data.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n    // yield put(UserSlice.retrieveUsers({ customerid }));\n  } catch (error) {\n    yield put(AuthSlice.deactivateUserFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport default function* userSaga() {\n  yield takeLatest(AuthSlice.signIn.type, signIn);\n  yield takeLatest(AuthSlice.signUp.type, signUp);\n  yield takeLatest(AuthSlice.confirmSignUp.type, confirmSignUp);\n  yield takeLatest(AuthSlice.resetPassword.type, resetPassword);\n  yield takeLatest(AuthSlice.confirmPassword.type, confirmPassword);\n  yield takeLatest(AuthSlice.changePassword.type, changePassword);\n  yield takeLatest(AuthSlice.validateInvite.type, validateInvite);\n  yield takeLatest(AuthSlice.updateUserAttributes.type, updateUserAttributes);\n  yield takeLatest(AuthSlice.deactivateUser.type, deactivateUser);\n}\n"]},"metadata":{},"sourceType":"module"}