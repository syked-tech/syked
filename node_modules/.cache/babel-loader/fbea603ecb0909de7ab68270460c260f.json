{"ast":null,"code":"import { call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport * as therapistSlice from 'containers/Therapist/therapistSlice';\nimport * as API from 'common/api';\nexport function* getTherapists() {\n  try {\n    var _response$data, _response$data$data;\n\n    const response = yield call(axios, API.THERAPIST_LIST_API);\n    yield put(therapistSlice.getTherapistsSuccess((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$data = _response$data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.result) || []));\n  } catch (error) {\n    yield put(therapistSlice.getTherapistsInFailed(error));\n  }\n}\nexport function* getReviews() {\n  try {\n    var _response$data2, _response$data2$data;\n\n    const response = yield call(axios, API.REVIEWS_API);\n    yield put(therapistSlice.getReviewsSuccess((response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$data = _response$data2.data) === null || _response$data2$data === void 0 ? void 0 : _response$data2$data.result) || []));\n  } catch (error) {\n    yield put(therapistSlice.getReviewsInFailed(error));\n  }\n}\nexport function* getQuestions() {\n  try {\n    var _response$data3, _response$data3$data;\n\n    const response = yield call(axios, API.QUESTIONS_API);\n    yield put(therapistSlice.getQuestionsSuccess((response === null || response === void 0 ? void 0 : (_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : (_response$data3$data = _response$data3.data) === null || _response$data3$data === void 0 ? void 0 : _response$data3$data.result) || []));\n  } catch (error) {\n    yield put(therapistSlice.getQuestionsInFailed(error));\n  }\n}\nexport default function* therapistSaga() {\n  yield takeLatest(therapistSlice.getTherapists.type, getTherapists);\n  yield takeLatest(therapistSlice.getReviews.type, getReviews);\n  yield takeLatest(therapistSlice.getQuestions.type, getQuestions);\n}","map":{"version":3,"sources":["/Users/lasimonne/Projects/syked.xyz/src/containers/Therapist/saga.js"],"names":["call","put","takeLatest","axios","therapistSlice","API","getTherapists","response","THERAPIST_LIST_API","getTherapistsSuccess","data","result","error","getTherapistsInFailed","getReviews","REVIEWS_API","getReviewsSuccess","getReviewsInFailed","getQuestions","QUESTIONS_API","getQuestionsSuccess","getQuestionsInFailed","therapistSaga","type"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,cAAZ,MAAgC,qCAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AAEA,OAAO,UAAUC,aAAV,GAA0B;AAC/B,MAAI;AAAA;;AACF,UAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACG,KAAD,EAAQE,GAAG,CAACG,kBAAZ,CAA3B;AACA,UAAMP,GAAG,CAACG,cAAc,CAACK,oBAAf,CAAoC,CAAAF,QAAQ,SAAR,IAAAA,QAAQ,WAAR,8BAAAA,QAAQ,CAAEG,IAAV,yFAAgBA,IAAhB,4EAAsBC,MAAtB,KAAgC,EAApE,CAAD,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMX,GAAG,CAACG,cAAc,CAACS,qBAAf,CAAqCD,KAArC,CAAD,CAAT;AACD;AACF;AAED,OAAO,UAAUE,UAAV,GAAuB;AAC5B,MAAI;AAAA;;AACF,UAAMP,QAAQ,GAAG,MAAMP,IAAI,CAACG,KAAD,EAAQE,GAAG,CAACU,WAAZ,CAA3B;AACA,UAAMd,GAAG,CAACG,cAAc,CAACY,iBAAf,CAAiC,CAAAT,QAAQ,SAAR,IAAAA,QAAQ,WAAR,+BAAAA,QAAQ,CAAEG,IAAV,4FAAgBA,IAAhB,8EAAsBC,MAAtB,KAAgC,EAAjE,CAAD,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMX,GAAG,CAACG,cAAc,CAACa,kBAAf,CAAkCL,KAAlC,CAAD,CAAT;AACD;AACF;AAED,OAAO,UAAUM,YAAV,GAAyB;AAC9B,MAAI;AAAA;;AACF,UAAMX,QAAQ,GAAG,MAAMP,IAAI,CAACG,KAAD,EAAQE,GAAG,CAACc,aAAZ,CAA3B;AACA,UAAMlB,GAAG,CAACG,cAAc,CAACgB,mBAAf,CAAmC,CAAAb,QAAQ,SAAR,IAAAA,QAAQ,WAAR,+BAAAA,QAAQ,CAAEG,IAAV,4FAAgBA,IAAhB,8EAAsBC,MAAtB,KAAgC,EAAnE,CAAD,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMX,GAAG,CAACG,cAAc,CAACiB,oBAAf,CAAoCT,KAApC,CAAD,CAAT;AACD;AACF;AAED,eAAe,UAAUU,aAAV,GAA0B;AACvC,QAAMpB,UAAU,CAACE,cAAc,CAACE,aAAf,CAA6BiB,IAA9B,EAAoCjB,aAApC,CAAhB;AACA,QAAMJ,UAAU,CAACE,cAAc,CAACU,UAAf,CAA0BS,IAA3B,EAAiCT,UAAjC,CAAhB;AACA,QAAMZ,UAAU,CAACE,cAAc,CAACc,YAAf,CAA4BK,IAA7B,EAAmCL,YAAnC,CAAhB;AACD","sourcesContent":["import { call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport * as therapistSlice from 'containers/Therapist/therapistSlice';\nimport * as API from 'common/api';\n\nexport function* getTherapists() {\n  try {\n    const response = yield call(axios, API.THERAPIST_LIST_API);\n    yield put(therapistSlice.getTherapistsSuccess(response?.data?.data?.result || []));\n  } catch (error) {\n    yield put(therapistSlice.getTherapistsInFailed(error));\n  }\n}\n\nexport function* getReviews() {\n  try {\n    const response = yield call(axios, API.REVIEWS_API);\n    yield put(therapistSlice.getReviewsSuccess(response?.data?.data?.result || []));\n  } catch (error) {\n    yield put(therapistSlice.getReviewsInFailed(error));\n  }\n}\n\nexport function* getQuestions() {\n  try {\n    const response = yield call(axios, API.QUESTIONS_API);\n    yield put(therapistSlice.getQuestionsSuccess(response?.data?.data?.result || []));\n  } catch (error) {\n    yield put(therapistSlice.getQuestionsInFailed(error));\n  }\n}\n\nexport default function* therapistSaga() {\n  yield takeLatest(therapistSlice.getTherapists.type, getTherapists);\n  yield takeLatest(therapistSlice.getReviews.type, getReviews);\n  yield takeLatest(therapistSlice.getQuestions.type, getQuestions);\n}\n"]},"metadata":{},"sourceType":"module"}