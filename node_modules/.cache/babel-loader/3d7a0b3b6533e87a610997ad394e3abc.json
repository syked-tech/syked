{"ast":null,"code":"var _jsxFileName = \"/Users/lasimonne/Projects/syked.xyz/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { SnackbarProvider } from 'notistack';\nimport Routes from 'Routes';\nimport { selectIsAuthenticated // selectUser,\n, userHasAuthenticated as userHasAuthenticatedAction // userSession as userSessionAction,\n} from 'containers/Auth/authSlice';\nimport history from 'common/history';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App({\n  userHasAuthenticated\n}) {\n  _s();\n\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n  return /*#__PURE__*/_jsxDEV(SnackbarProvider, {\n    children: /*#__PURE__*/_jsxDEV(ConnectedRouter, {\n      history: history,\n      children: [/*#__PURE__*/_jsxDEV(Routes, {\n        appProps: {\n          isAuthenticated,\n          userHasAuthenticated\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Tis/laFBs1mUsdamrhCn/+4kssg=\", false, function () {\n  return [useSelector];\n});\n\n_c = App;\nApp.propTypes = {\n  userHasAuthenticated: PropTypes.func\n};\n\nconst mapDispatchToProps = dispatch => ({\n  userHasAuthenticated: values => dispatch(userHasAuthenticatedAction(values))\n});\n\nconst withConnect = connect(null, mapDispatchToProps);\nexport default compose(withRouter, withConnect)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lasimonne/Projects/syked.xyz/src/App.js"],"names":["React","PropTypes","compose","connect","useSelector","withRouter","ConnectedRouter","SnackbarProvider","Routes","selectIsAuthenticated","userHasAuthenticated","userHasAuthenticatedAction","history","App","isAuthenticated","propTypes","func","mapDispatchToProps","dispatch","values","withConnect"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,SAASC,gBAAT,QAAiC,WAAjC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SACEC,qBADF,CAEE;AAFF,EAGEC,oBAAoB,IAAIC,0BAH1B,CAIE;AAJF,OAKO,2BALP;AAMA,OAAOC,OAAP,MAAoB,gBAApB;;;AAEA,SAASC,GAAT,CAAa;AAAEH,EAAAA;AAAF,CAAb,EAAuC;AAAA;;AACrC,QAAMI,eAAe,GAAGV,WAAW,CAACK,qBAAD,CAAnC;AACA,sBACE,QAAC,gBAAD;AAAA,2BACE,QAAC,eAAD;AAAiB,MAAA,OAAO,EAAEG,OAA1B;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAE;AAAEE,UAAAA,eAAF;AAAmBJ,UAAAA;AAAnB;AAAlB;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GATQG,G;UACiBT,W;;;KADjBS,G;AAWTA,GAAG,CAACE,SAAJ,GAAgB;AACdL,EAAAA,oBAAoB,EAAET,SAAS,CAACe;AADlB,CAAhB;;AAIA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCR,EAAAA,oBAAoB,EAAGS,MAAD,IAAYD,QAAQ,CAACP,0BAA0B,CAACQ,MAAD,CAA3B;AADF,CAAf,CAA3B;;AAIA,MAAMC,WAAW,GAAGjB,OAAO,CAAC,IAAD,EAAOc,kBAAP,CAA3B;AAEA,eAAef,OAAO,CAACG,UAAD,EAAae,WAAb,CAAP,CAAiCP,GAAjC,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { SnackbarProvider } from 'notistack';\nimport Routes from 'Routes';\nimport {\n  selectIsAuthenticated,\n  // selectUser,\n  userHasAuthenticated as userHasAuthenticatedAction,\n  // userSession as userSessionAction,\n} from 'containers/Auth/authSlice';\nimport history from 'common/history';\n\nfunction App({ userHasAuthenticated }) {\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n  return (\n    <SnackbarProvider>\n      <ConnectedRouter history={history}>\n        <Routes appProps={{ isAuthenticated, userHasAuthenticated }} />;\n      </ConnectedRouter>\n    </SnackbarProvider>\n  );\n}\n\nApp.propTypes = {\n  userHasAuthenticated: PropTypes.func,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  userHasAuthenticated: (values) => dispatch(userHasAuthenticatedAction(values)),\n});\n\nconst withConnect = connect(null, mapDispatchToProps);\n\nexport default compose(withRouter, withConnect)(App);\n"]},"metadata":{},"sourceType":"module"}