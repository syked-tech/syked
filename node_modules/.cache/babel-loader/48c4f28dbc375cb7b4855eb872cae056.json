{"ast":null,"code":"import { call, put, takeLatest, select } from 'redux-saga/effects';\nimport { Cookies } from 'react-cookie';\nimport { push } from 'connected-react-router';\nimport axios from 'axios';\nimport * as AuthSlice from 'containers/Auth/authSlice'; // import * as UserSlice from 'containers/Users/usersSlice';\n\nimport * as CONSTANTS from 'common/constants';\nimport * as API from 'common/api';\nimport { enqueueSnackbar as enqueueSnackbarAction // closeSnackbar as closeSnackbarAction,\n} from 'components/Notifier/actions'; // import { redirectSignin } from 'common/redirects';\n// const hostname = window && window.location && window.location.hostname;\n\nconst cookies = new Cookies();\nexport function* signIn(actions) {\n  const body = actions.payload;\n  const options = {\n    url: API.LOGIN_API,\n    method: 'POST',\n    data: JSON.stringify(body)\n  };\n\n  try {\n    var _authResponse$data, _authResponse$data$Au;\n\n    const authResponse = yield call(axios, options);\n    const token = authResponse === null || authResponse === void 0 ? void 0 : (_authResponse$data = authResponse.data) === null || _authResponse$data === void 0 ? void 0 : (_authResponse$data$Au = _authResponse$data.AuthenticationResult) === null || _authResponse$data$Au === void 0 ? void 0 : _authResponse$data$Au.IdToken;\n    const {\n      exp\n    } = JSON.parse(atob(token.split('.')[1]));\n    const expires = new Date(exp * 1000);\n    yield cookies.set(CONSTANTS.JWT_NAME, token, {\n      path: '/',\n      expires\n    });\n    yield put(AuthSlice.signInSuccess(authResponse.data));\n    yield put(push(CONSTANTS.DASHBOARD_PAGE));\n    yield put(enqueueSnackbarAction({\n      message: 'Login successfully',\n      options: {\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        },\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {// console.log(error);\n    // yield put(AuthSlice.signInFailed(error));\n    // yield put(\n    //   enqueueSnackbarAction({\n    //     message: error.message,\n    //     options: {\n    //       key: new Date().getTime() + Math.random(),\n    //       variant: 'error',\n    //       action: () => null,\n    //     },\n    //   }),\n    // );\n  }\n}\nexport function* signOut() {\n  try {\n    const expires = new Date();\n    yield cookies.remove(CONSTANTS.JWT_NAME, {\n      path: '/',\n      expires\n    });\n    console.log('Logout'); // yield put(AuthSlice.signOut());\n    // yield put(push(CONSTANTS.LOGIN_PAGE));\n    // yield put(\n    //   enqueueSnackbarAction({\n    //     message: 'Logout successfully',\n    //     options: {\n    //       anchorOrigin: {\n    //         vertical: 'top',\n    //         horizontal: 'right',\n    //       },\n    //       key: new Date().getTime() + Math.random(),\n    //       variant: 'success',\n    //       action: () => null,\n    //     },\n    //   }),\n    // );\n  } catch (error) {\n    yield put(AuthSlice.signOutFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error === null || error === void 0 ? void 0 : error.message,\n      options: {\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        },\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* signUp(actions) {\n  const body = actions.payload;\n  const options = {\n    url: API.LOGIN_API,\n    method: 'POST',\n    data: JSON.stringify(body)\n  };\n\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.signUpSuccess(authResponse)); // redirect to verify\n\n    yield put(push(CONSTANTS.VERIFICATION_PAGE));\n    yield put(enqueueSnackbarAction({\n      message: `Confirmation code successfully sent to ${body === null || body === void 0 ? void 0 : body.mobile_number}`,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.signUpFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* confirmSignUp(actions) {\n  const {\n    email,\n    confirmationCode\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.confirmSignUp(email, confirmationCode);\n    yield put(AuthSlice.confirmSignUpSuccess(authResponse)); // yield put(push(CONSTANTS.SIGNIN));\n\n    yield put(enqueueSnackbarAction({\n      message: 'User confirmed successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.confirmSignUpFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* loginSuccessSaga(data) {\n  const {\n    signInUserSession\n  } = data;\n  const {\n    payload\n  } = signInUserSession.idToken;\n\n  switch (payload['cognito:groups'][0]) {\n    case 'SuperAdmin':\n      {\n        // yield put(push(VERIFICATION_PAGE));\n        return;\n      }\n\n    case 'Admin':\n      {\n        // const uri = `${redirectSignin(hostname)}/${payload.profile}${CONSTANTS.DASHBOARD}`;\n        // yield put(push(`/r/${encodeURIComponent(uri)}`));\n        return;\n      }\n\n    case 'Consultant':\n      {\n        // const uri = `${redirectSignin(hostname)}/${payload.profile}${CONSTANTS.DASHBOARD}`;\n        // yield put(push(`/r/${encodeURIComponent(uri)}`));\n        return;\n      }\n    // TODO: Error page, user\n\n    default:\n      {\n        yield put(push(CONSTANTS.ROOT));\n      }\n  }\n}\nexport function* resetPassword(actions) {\n  const {\n    Username\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPassword(Username);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse)); // yield put(push(`${CONSTANTS.FORGOT_PASSWORD}/${encodeURIComponent(Username)}`));\n  } catch (error) {\n    yield put(AuthSlice.resetPasswordFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* confirmPassword(actions) {\n  const {\n    Username,\n    SessionCode,\n    NewPassword\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPasswordSubmit(Username, SessionCode, NewPassword);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse)); // yield put(push(CONSTANTS.SIGNIN));\n\n    yield put(enqueueSnackbarAction({\n      message: 'Password changed successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.confirmPasswordFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* changePassword(actions) {\n  // console.log(actions);\n  const {\n    OldPassword,\n    NewPassword,\n    isAccount\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const user = yield Auth.currentAuthenticatedUser(); // eslint-disable-next-line no-undef\n\n    const authResponse = yield Auth.changePassword(user, OldPassword, NewPassword);\n    yield put(AuthSlice.changePasswordSuccess(authResponse));\n\n    if (!isAccount) {// yield put(push(CONSTANTS.SIGNIN));\n    }\n\n    yield put(enqueueSnackbarAction({\n      message: 'Password changed successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.changePasswordFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* updateUserAttributes(actions) {\n  const {\n    idToken\n  } = yield select(AuthSlice.selectUserSession);\n  const username = actions.payload['cognito:username']; // console.log(attributes);\n\n  const options = {\n    url: `${API.USERS_API}/${username}`,\n    method: 'put',\n    headers: {\n      Authorization: idToken.jwtToken\n    },\n    data: actions.payload\n  };\n\n  try {\n    const authResponse = yield call(axios, options); // console.log(authResponse);\n    // const user = yield Auth.currentAuthenticatedUser();\n    // const authResponse = yield Auth.updateUserAttributes(user, {\n    //   name,\n    //   family_name,\n    // });\n    // const currentSession = yield Auth.currentSession();\n    // yield put(AuthSlice.userSession(currentSession));\n\n    yield put(AuthSlice.updateUserAttributesSuccess(authResponse));\n    yield put(enqueueSnackbarAction({\n      message: 'Account updated successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.updateUserAttributesFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* validateInvite(actions) {\n  const options = {\n    url: API.VALIDATE_USER_INVITE_API,\n    method: 'post',\n    data: actions.payload\n  };\n\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.validateInviteSuccess(authResponse.data.data)); // yield put(push(CONSTANTS.CUSTOMERS));\n\n    yield put(enqueueSnackbarAction({\n      message: authResponse.data.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.validateInviteFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* deactivateUser(actions) {\n  const {\n    idToken\n  } = yield select(AuthSlice.selectUserSession);\n  const {\n    Username\n  } = actions.payload;\n  const options = {\n    url: `${API.USERS_API}/${Username}/deactivate`,\n    method: 'delete',\n    headers: {\n      Authorization: idToken.jwtToken\n    }\n  };\n\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.deactivateUserSuccess(authResponse.data.data));\n    yield put(enqueueSnackbarAction({\n      message: authResponse.data.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    })); // yield put(UserSlice.retrieveUsers({ customerid }));\n  } catch (error) {\n    yield put(AuthSlice.deactivateUserFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport default function* userSaga() {\n  yield takeLatest(AuthSlice.signIn.type, signIn);\n  yield takeLatest(AuthSlice.signOut.type, signOut);\n  yield takeLatest(AuthSlice.signUp.type, signUp);\n  yield takeLatest(AuthSlice.confirmSignUp.type, confirmSignUp);\n  yield takeLatest(AuthSlice.resetPassword.type, resetPassword);\n  yield takeLatest(AuthSlice.confirmPassword.type, confirmPassword);\n  yield takeLatest(AuthSlice.changePassword.type, changePassword);\n  yield takeLatest(AuthSlice.validateInvite.type, validateInvite);\n  yield takeLatest(AuthSlice.updateUserAttributes.type, updateUserAttributes);\n  yield takeLatest(AuthSlice.deactivateUser.type, deactivateUser);\n}","map":{"version":3,"sources":["/Users/lasimonne/Projects/syked.xyz/src/containers/Auth/saga.js"],"names":["call","put","takeLatest","select","Cookies","push","axios","AuthSlice","CONSTANTS","API","enqueueSnackbar","enqueueSnackbarAction","cookies","signIn","actions","body","payload","options","url","LOGIN_API","method","data","JSON","stringify","authResponse","token","AuthenticationResult","IdToken","exp","parse","atob","split","expires","Date","set","JWT_NAME","path","signInSuccess","DASHBOARD_PAGE","message","anchorOrigin","vertical","horizontal","key","getTime","Math","random","variant","action","error","signOut","remove","console","log","signOutFailed","signUp","signUpSuccess","VERIFICATION_PAGE","mobile_number","signUpFailed","confirmSignUp","email","confirmationCode","Auth","confirmSignUpSuccess","confirmSignUpFailed","loginSuccessSaga","signInUserSession","idToken","ROOT","resetPassword","Username","forgotPassword","resetPasswordSuccess","resetPasswordFailed","confirmPassword","SessionCode","NewPassword","forgotPasswordSubmit","confirmPasswordFailed","changePassword","OldPassword","isAccount","user","currentAuthenticatedUser","changePasswordSuccess","changePasswordFailed","updateUserAttributes","selectUserSession","username","USERS_API","headers","Authorization","jwtToken","updateUserAttributesSuccess","updateUserAttributesFailed","validateInvite","VALIDATE_USER_INVITE_API","validateInviteSuccess","validateInviteFailed","deactivateUser","deactivateUserSuccess","deactivateUserFailed","userSaga","type"],"mappings":"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","sourcesContent":["import { call, put, takeLatest, select } from 'redux-saga/effects';\nimport { Cookies } from 'react-cookie';\nimport { push } from 'connected-react-router';\nimport axios from 'axios';\nimport * as AuthSlice from 'containers/Auth/authSlice';\n// import * as UserSlice from 'containers/Users/usersSlice';\nimport * as CONSTANTS from 'common/constants';\nimport * as API from 'common/api';\nimport {\n  enqueueSnackbar as enqueueSnackbarAction,\n  // closeSnackbar as closeSnackbarAction,\n} from 'components/Notifier/actions';\n// import { redirectSignin } from 'common/redirects';\n// const hostname = window && window.location && window.location.hostname;\n\nconst cookies = new Cookies();\n\nexport function* signIn(actions) {\n  const body = actions.payload;\n  const options = {\n    url: API.LOGIN_API,\n    method: 'POST',\n    data: JSON.stringify(body),\n  };\n  try {\n    const authResponse = yield call(axios, options);\n    const token = authResponse?.data?.AuthenticationResult?.IdToken;\n    const { exp } = JSON.parse(atob(token.split('.')[1]));\n    const expires = new Date(exp * 1000);\n    yield cookies.set(CONSTANTS.JWT_NAME, token, { path: '/', expires });\n    yield put(AuthSlice.signInSuccess(authResponse.data));\n    yield put(push(CONSTANTS.DASHBOARD_PAGE));\n    yield put(\n      enqueueSnackbarAction({\n        message: 'Login successfully',\n        options: {\n          anchorOrigin: {\n            vertical: 'top',\n            horizontal: 'right',\n          },\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    // console.log(error);\n    // yield put(AuthSlice.signInFailed(error));\n    // yield put(\n    //   enqueueSnackbarAction({\n    //     message: error.message,\n    //     options: {\n    //       key: new Date().getTime() + Math.random(),\n    //       variant: 'error',\n    //       action: () => null,\n    //     },\n    //   }),\n    // );\n  }\n}\n\nexport function* signOut() {\n  try {\n    const expires = new Date();\n    yield cookies.remove(CONSTANTS.JWT_NAME, { path: '/', expires });\n    console.log('Logout');\n    // yield put(AuthSlice.signOut());\n    // yield put(push(CONSTANTS.LOGIN_PAGE));\n    // yield put(\n    //   enqueueSnackbarAction({\n    //     message: 'Logout successfully',\n    //     options: {\n    //       anchorOrigin: {\n    //         vertical: 'top',\n    //         horizontal: 'right',\n    //       },\n    //       key: new Date().getTime() + Math.random(),\n    //       variant: 'success',\n    //       action: () => null,\n    //     },\n    //   }),\n    // );\n  } catch (error) {\n    yield put(AuthSlice.signOutFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error?.message,\n        options: {\n          anchorOrigin: {\n            vertical: 'top',\n            horizontal: 'right',\n          },\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* signUp(actions) {\n  const body = actions.payload;\n  const options = {\n    url: API.LOGIN_API,\n    method: 'POST',\n    data: JSON.stringify(body),\n  };\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.signUpSuccess(authResponse));\n    // redirect to verify\n    yield put(push(CONSTANTS.VERIFICATION_PAGE));\n    yield put(\n      enqueueSnackbarAction({\n        message: `Confirmation code successfully sent to ${body?.mobile_number}`,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.signUpFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* confirmSignUp(actions) {\n  const { email, confirmationCode } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.confirmSignUp(email, confirmationCode);\n    yield put(AuthSlice.confirmSignUpSuccess(authResponse));\n    // yield put(push(CONSTANTS.SIGNIN));\n    yield put(\n      enqueueSnackbarAction({\n        message: 'User confirmed successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.confirmSignUpFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* loginSuccessSaga(data) {\n  const { signInUserSession } = data;\n  const { payload } = signInUserSession.idToken;\n\n  switch (payload['cognito:groups'][0]) {\n    case 'SuperAdmin': {\n      // yield put(push(VERIFICATION_PAGE));\n\n      return;\n    }\n    case 'Admin': {\n      // const uri = `${redirectSignin(hostname)}/${payload.profile}${CONSTANTS.DASHBOARD}`;\n      // yield put(push(`/r/${encodeURIComponent(uri)}`));\n\n      return;\n    }\n    case 'Consultant': {\n      // const uri = `${redirectSignin(hostname)}/${payload.profile}${CONSTANTS.DASHBOARD}`;\n      // yield put(push(`/r/${encodeURIComponent(uri)}`));\n\n      return;\n    }\n    // TODO: Error page, user\n    default: {\n      yield put(push(CONSTANTS.ROOT));\n    }\n  }\n}\n\nexport function* resetPassword(actions) {\n  const { Username } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPassword(Username);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse));\n    // yield put(push(`${CONSTANTS.FORGOT_PASSWORD}/${encodeURIComponent(Username)}`));\n  } catch (error) {\n    yield put(AuthSlice.resetPasswordFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* confirmPassword(actions) {\n  const { Username, SessionCode, NewPassword } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPasswordSubmit(Username, SessionCode, NewPassword);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse));\n    // yield put(push(CONSTANTS.SIGNIN));\n    yield put(\n      enqueueSnackbarAction({\n        message: 'Password changed successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.confirmPasswordFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* changePassword(actions) {\n  // console.log(actions);\n  const { OldPassword, NewPassword, isAccount } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const user = yield Auth.currentAuthenticatedUser();\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.changePassword(user, OldPassword, NewPassword);\n    yield put(AuthSlice.changePasswordSuccess(authResponse));\n    if (!isAccount) {\n      // yield put(push(CONSTANTS.SIGNIN));\n    }\n    yield put(\n      enqueueSnackbarAction({\n        message: 'Password changed successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.changePasswordFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* updateUserAttributes(actions) {\n  const { idToken } = yield select(AuthSlice.selectUserSession);\n  const username = actions.payload['cognito:username'];\n  // console.log(attributes);\n\n  const options = {\n    url: `${API.USERS_API}/${username}`,\n    method: 'put',\n    headers: {\n      Authorization: idToken.jwtToken,\n    },\n    data: actions.payload,\n  };\n\n  try {\n    const authResponse = yield call(axios, options);\n    // console.log(authResponse);\n    // const user = yield Auth.currentAuthenticatedUser();\n    // const authResponse = yield Auth.updateUserAttributes(user, {\n    //   name,\n    //   family_name,\n    // });\n    // const currentSession = yield Auth.currentSession();\n    // yield put(AuthSlice.userSession(currentSession));\n    yield put(AuthSlice.updateUserAttributesSuccess(authResponse));\n    yield put(\n      enqueueSnackbarAction({\n        message: 'Account updated successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.updateUserAttributesFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* validateInvite(actions) {\n  const options = {\n    url: API.VALIDATE_USER_INVITE_API,\n    method: 'post',\n    data: actions.payload,\n  };\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.validateInviteSuccess(authResponse.data.data));\n    // yield put(push(CONSTANTS.CUSTOMERS));\n    yield put(\n      enqueueSnackbarAction({\n        message: authResponse.data.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.validateInviteFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* deactivateUser(actions) {\n  const { idToken } = yield select(AuthSlice.selectUserSession);\n  const { Username } = actions.payload;\n  const options = {\n    url: `${API.USERS_API}/${Username}/deactivate`,\n    method: 'delete',\n    headers: {\n      Authorization: idToken.jwtToken,\n    },\n  };\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.deactivateUserSuccess(authResponse.data.data));\n    yield put(\n      enqueueSnackbarAction({\n        message: authResponse.data.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n    // yield put(UserSlice.retrieveUsers({ customerid }));\n  } catch (error) {\n    yield put(AuthSlice.deactivateUserFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport default function* userSaga() {\n  yield takeLatest(AuthSlice.signIn.type, signIn);\n  yield takeLatest(AuthSlice.signOut.type, signOut);\n  yield takeLatest(AuthSlice.signUp.type, signUp);\n  yield takeLatest(AuthSlice.confirmSignUp.type, confirmSignUp);\n  yield takeLatest(AuthSlice.resetPassword.type, resetPassword);\n  yield takeLatest(AuthSlice.confirmPassword.type, confirmPassword);\n  yield takeLatest(AuthSlice.changePassword.type, changePassword);\n  yield takeLatest(AuthSlice.validateInvite.type, validateInvite);\n  yield takeLatest(AuthSlice.updateUserAttributes.type, updateUserAttributes);\n  yield takeLatest(AuthSlice.deactivateUser.type, deactivateUser);\n}\n"]},"metadata":{},"sourceType":"module"}