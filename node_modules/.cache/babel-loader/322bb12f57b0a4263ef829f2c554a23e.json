{"ast":null,"code":"import _objectSpread from\"/Users/lasimonne/Projects/syked.xyz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/lasimonne/Projects/syked.xyz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React from'react';import{useDispatch,useSelector}from'react-redux';import{useSnackbar}from'notistack';import{removeSnackbar}from'./actions';var displayed=[];var Notifier=function Notifier(){var dispatch=useDispatch();var notifications=useSelector(function(store){return store.notifier.notifications||[];});var _useSnackbar=useSnackbar(),enqueueSnackbar=_useSnackbar.enqueueSnackbar,closeSnackbar=_useSnackbar.closeSnackbar;var storeDisplayed=function storeDisplayed(id){displayed=[].concat(_toConsumableArray(displayed),[id]);};var removeDisplayed=function removeDisplayed(id){displayed=_toConsumableArray(displayed.filter(function(key){return id!==key;}));};React.useEffect(function(){notifications.forEach(function(_ref){var key=_ref.key,message=_ref.message,_ref$options=_ref.options,options=_ref$options===void 0?{}:_ref$options,_ref$dismissed=_ref.dismissed,dismissed=_ref$dismissed===void 0?false:_ref$dismissed;if(dismissed){// dismiss snackbar using notistack\ncloseSnackbar(key);return;}// do nothing if snackbar is already displayed\nif(displayed.includes(key))return;// display snackbar using notistack\nenqueueSnackbar(message,_objectSpread(_objectSpread({key:key},options),{},{onClose:function onClose(event,reason,myKey){if(options.onClose){options.onClose(event,reason,myKey);}},onExited:function onExited(event,myKey){// removen this snackbar from redux store\ndispatch(removeSnackbar(myKey));removeDisplayed(myKey);}}));// keep track of snackbars that we've displayed\nstoreDisplayed(key);});},[notifications,closeSnackbar,enqueueSnackbar,dispatch]);return null;};export default Notifier;","map":{"version":3,"sources":["/Users/lasimonne/Projects/syked.xyz/src/components/Notifier/Notifier.js"],"names":["React","useDispatch","useSelector","useSnackbar","removeSnackbar","displayed","Notifier","dispatch","notifications","store","notifier","enqueueSnackbar","closeSnackbar","storeDisplayed","id","removeDisplayed","filter","key","useEffect","forEach","message","options","dismissed","includes","onClose","event","reason","myKey","onExited"],"mappings":"2TAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,WAAT,KAA4B,WAA5B,CACA,OAASC,cAAT,KAA+B,WAA/B,CAEA,GAAIC,CAAAA,SAAS,CAAG,EAAhB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,GAAMC,CAAAA,QAAQ,CAAGN,WAAW,EAA5B,CACA,GAAMO,CAAAA,aAAa,CAAGN,WAAW,CAAC,SAACO,KAAD,QAAWA,CAAAA,KAAK,CAACC,QAAN,CAAeF,aAAf,EAAgC,EAA3C,EAAD,CAAjC,CACA,iBAA2CL,WAAW,EAAtD,CAAQQ,eAAR,cAAQA,eAAR,CAAyBC,aAAzB,cAAyBA,aAAzB,CAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,EAAD,CAAQ,CAC7BT,SAAS,8BAAOA,SAAP,GAAkBS,EAAlB,EAAT,CACD,CAFD,CAIA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACD,EAAD,CAAQ,CAC9BT,SAAS,oBAAOA,SAAS,CAACW,MAAV,CAAiB,SAACC,GAAD,QAASH,CAAAA,EAAE,GAAKG,GAAhB,EAAjB,CAAP,CAAT,CACD,CAFD,CAIAjB,KAAK,CAACkB,SAAN,CAAgB,UAAM,CACpBV,aAAa,CAACW,OAAd,CAAsB,cAAuD,IAApDF,CAAAA,GAAoD,MAApDA,GAAoD,CAA/CG,OAA+C,MAA/CA,OAA+C,mBAAtCC,OAAsC,CAAtCA,OAAsC,uBAA5B,EAA4B,kCAAxBC,SAAwB,CAAxBA,SAAwB,yBAAZ,KAAY,gBAC3E,GAAIA,SAAJ,CAAe,CACb;AACAV,aAAa,CAACK,GAAD,CAAb,CACA,OACD,CAED;AACA,GAAIZ,SAAS,CAACkB,QAAV,CAAmBN,GAAnB,CAAJ,CAA6B,OAE7B;AACAN,eAAe,CAACS,OAAD,8BACbH,GAAG,CAAHA,GADa,EAEVI,OAFU,MAGbG,OAAO,CAAE,iBAACC,KAAD,CAAQC,MAAR,CAAgBC,KAAhB,CAA0B,CACjC,GAAIN,OAAO,CAACG,OAAZ,CAAqB,CACnBH,OAAO,CAACG,OAAR,CAAgBC,KAAhB,CAAuBC,MAAvB,CAA+BC,KAA/B,EACD,CACF,CAPY,CAQbC,QAAQ,CAAE,kBAACH,KAAD,CAAQE,KAAR,CAAkB,CAC1B;AACApB,QAAQ,CAACH,cAAc,CAACuB,KAAD,CAAf,CAAR,CACAZ,eAAe,CAACY,KAAD,CAAf,CACD,CAZY,GAAf,CAeA;AACAd,cAAc,CAACI,GAAD,CAAd,CACD,CA5BD,EA6BD,CA9BD,CA8BG,CAACT,aAAD,CAAgBI,aAAhB,CAA+BD,eAA/B,CAAgDJ,QAAhD,CA9BH,EAgCA,MAAO,KAAP,CACD,CA9CD,CAgDA,cAAeD,CAAAA,QAAf","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport { removeSnackbar } from './actions';\n\nlet displayed = [];\n\nconst Notifier = () => {\n  const dispatch = useDispatch();\n  const notifications = useSelector((store) => store.notifier.notifications || []);\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const storeDisplayed = (id) => {\n    displayed = [...displayed, id];\n  };\n\n  const removeDisplayed = (id) => {\n    displayed = [...displayed.filter((key) => id !== key)];\n  };\n\n  React.useEffect(() => {\n    notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\n      if (dismissed) {\n        // dismiss snackbar using notistack\n        closeSnackbar(key);\n        return;\n      }\n\n      // do nothing if snackbar is already displayed\n      if (displayed.includes(key)) return;\n\n      // display snackbar using notistack\n      enqueueSnackbar(message, {\n        key,\n        ...options,\n        onClose: (event, reason, myKey) => {\n          if (options.onClose) {\n            options.onClose(event, reason, myKey);\n          }\n        },\n        onExited: (event, myKey) => {\n          // removen this snackbar from redux store\n          dispatch(removeSnackbar(myKey));\n          removeDisplayed(myKey);\n        },\n      });\n\n      // keep track of snackbars that we've displayed\n      storeDisplayed(key);\n    });\n  }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);\n\n  return null;\n};\n\nexport default Notifier;\n"]},"metadata":{},"sourceType":"module"}