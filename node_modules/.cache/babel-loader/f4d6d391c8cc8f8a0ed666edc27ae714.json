{"ast":null,"code":"import { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport history from 'common/history';\nimport { apiMiddleware } from 'redux-api-middleware';\nimport notifications from 'components/Notifier/reducer';\nimport authReducer from 'containers/Auth/authSlice'; // import customerReducer from 'containers/Customers/customerSlice';\n// import policiesReducer from 'containers/Policies/policiesSlice';\n// import usersReducer from 'containers/Users/usersSlice';\n\nimport authSaga from 'containers/Auth/saga'; // import customerSaga from 'containers/Customers/saga';\n// import policiesSaga from 'containers/Policies/saga';\n// import userSaga from 'containers/Users/saga';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst router = routerMiddleware(history);\nconst rootReducer = combineReducers({\n  // form,\n  notifier: notifications,\n  auth: authReducer,\n  // customer: customerReducer,\n  // policy: policiesReducer,\n  // user: usersReducer,\n  router: connectRouter(history)\n});\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: [sagaMiddleware, apiMiddleware, router]\n});\nsagaMiddleware.run(authSaga); // sagaMiddleware.run(customerSaga);\n// sagaMiddleware.run(policiesSaga);\n// sagaMiddleware.run(userSaga);\n\nexport default store;","map":{"version":3,"sources":["/Users/lasimonne/Projects/syked.xyz/src/common/store.js"],"names":["configureStore","combineReducers","connectRouter","routerMiddleware","createSagaMiddleware","history","apiMiddleware","notifications","authReducer","authSaga","sagaMiddleware","router","rootReducer","notifier","auth","store","reducer","middleware","run"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,eAAzB,QAAgD,kBAAhD;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,wBAAhD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AAEA,OAAOC,WAAP,MAAwB,2BAAxB,C,CACA;AACA;AACA;;AACA,OAAOC,QAAP,MAAqB,sBAArB,C,CACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAGN,oBAAoB,EAA3C;AACA,MAAMO,MAAM,GAAGR,gBAAgB,CAACE,OAAD,CAA/B;AAEA,MAAMO,WAAW,GAAGX,eAAe,CAAC;AAClC;AACAY,EAAAA,QAAQ,EAAEN,aAFwB;AAGlCO,EAAAA,IAAI,EAAEN,WAH4B;AAIlC;AACA;AACA;AACAG,EAAAA,MAAM,EAAET,aAAa,CAACG,OAAD;AAPa,CAAD,CAAnC;AAUA,OAAO,MAAMU,KAAK,GAAGf,cAAc,CAAC;AAClCgB,EAAAA,OAAO,EAAEJ,WADyB;AAElCK,EAAAA,UAAU,EAAE,CAACP,cAAD,EAAiBJ,aAAjB,EAAgCK,MAAhC;AAFsB,CAAD,CAA5B;AAKPD,cAAc,CAACQ,GAAf,CAAmBT,QAAnB,E,CACA;AACA;AACA;;AAEA,eAAeM,KAAf","sourcesContent":["import { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport history from 'common/history';\nimport { apiMiddleware } from 'redux-api-middleware';\nimport notifications from 'components/Notifier/reducer';\n\nimport authReducer from 'containers/Auth/authSlice';\n// import customerReducer from 'containers/Customers/customerSlice';\n// import policiesReducer from 'containers/Policies/policiesSlice';\n// import usersReducer from 'containers/Users/usersSlice';\nimport authSaga from 'containers/Auth/saga';\n// import customerSaga from 'containers/Customers/saga';\n// import policiesSaga from 'containers/Policies/saga';\n// import userSaga from 'containers/Users/saga';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst router = routerMiddleware(history);\n\nconst rootReducer = combineReducers({\n  // form,\n  notifier: notifications,\n  auth: authReducer,\n  // customer: customerReducer,\n  // policy: policiesReducer,\n  // user: usersReducer,\n  router: connectRouter(history),\n});\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: [sagaMiddleware, apiMiddleware, router],\n});\n\nsagaMiddleware.run(authSaga);\n// sagaMiddleware.run(customerSaga);\n// sagaMiddleware.run(policiesSaga);\n// sagaMiddleware.run(userSaga);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}