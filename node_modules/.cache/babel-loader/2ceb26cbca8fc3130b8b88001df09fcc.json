{"ast":null,"code":"import { call, put, takeLatest, select } from 'redux-saga/effects';\nimport { Cookies } from 'react-cookie';\nimport { push } from 'connected-react-router';\nimport axios from 'axios';\nimport * as AuthSlice from 'containers/Auth/authSlice'; // import * as UserSlice from 'containers/Users/usersSlice';\n\nimport * as CONSTANTS from 'common/constants';\nimport * as API from 'common/api';\nimport { enqueueSnackbar as enqueueSnackbarAction // closeSnackbar as closeSnackbarAction,\n} from 'components/Notifier/actions'; // import { redirectSignin } from 'common/redirects';\n// const hostname = window && window.location && window.location.hostname;\n\nconst cookies = new Cookies();\nexport function* signIn(actions) {\n  const body = actions.payload;\n  const options = {\n    url: API.LOGIN_API,\n    method: 'POST',\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'application/json'\n    },\n    data: JSON.stringify(body)\n  };\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield call(axios, options); // eslint-disable-next-line no-console\n\n    console.log(authResponse); // eslint-disable-next-line no-undef\n\n    const expires = new Date(exp * 1000); // eslint-disable-next-line no-undef\n\n    yield cookies.set(CONSTANTS.JWT_NAME, token, {\n      expires\n    });\n    yield put(push(CONSTANTS.DASHBOARD_PAGE)); // yield put(AuthSlice.signInSuccess(authResponse));\n    // const { challengeName } = authResponse;\n    // switch (challengeName && challengeName.value) {\n    //   case 'NEW_PASSWORD_REQUIRED': {\n    //     // yield put(push(`/change/${encodeURIComponent(Username)}`));\n    //     return;\n    //   }\n    //   default: {\n    //     yield call(loginSuccessSaga, authResponse);\n    //     yield put(\n    //       enqueueSnackbarAction({\n    //         message: 'Signed in successfully',\n    //         options: {\n    //           key: new Date().getTime() + Math.random(),\n    //           variant: 'success',\n    //           action: () => null,\n    //         },\n    //       }),\n    //     );\n    //   }\n    // }\n  } catch (error) {// yield put(AuthSlice.signInFailed(error));\n    // yield put(\n    //   enqueueSnackbarAction({\n    //     message: error.message,\n    //     options: {\n    //       key: new Date().getTime() + Math.random(),\n    //       variant: 'error',\n    //       action: () => null,\n    //     },\n    //   }),\n    // );\n  }\n}\nexport function* signUp(actions) {\n  const body = actions.payload;\n  const options = {\n    url: API.LOGIN_API,\n    method: 'POST',\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'application/json'\n    },\n    data: JSON.stringify(body)\n  };\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.signUpSuccess(authResponse)); // redirect to verify\n\n    yield put(enqueueSnackbarAction({\n      message: `Confirmation code successfully sent to ${body === null || body === void 0 ? void 0 : body.mobile_number}`,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.signUpFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* confirmSignUp(actions) {\n  const {\n    email,\n    confirmationCode\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.confirmSignUp(email, confirmationCode);\n    yield put(AuthSlice.confirmSignUpSuccess(authResponse)); // yield put(push(CONSTANTS.SIGNIN));\n\n    yield put(enqueueSnackbarAction({\n      message: 'User confirmed successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.confirmSignUpFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* loginSuccessSaga(data) {\n  const {\n    signInUserSession\n  } = data;\n  const {\n    payload\n  } = signInUserSession.idToken;\n\n  switch (payload['cognito:groups'][0]) {\n    case 'SuperAdmin':\n      {\n        // yield put(push(`/r/${encodeURIComponent(redirectSignin(hostname))}`));\n        return;\n      }\n\n    case 'Admin':\n      {\n        // const uri = `${redirectSignin(hostname)}/${payload.profile}${CONSTANTS.DASHBOARD}`;\n        // yield put(push(`/r/${encodeURIComponent(uri)}`));\n        return;\n      }\n\n    case 'Consultant':\n      {\n        // const uri = `${redirectSignin(hostname)}/${payload.profile}${CONSTANTS.DASHBOARD}`;\n        // yield put(push(`/r/${encodeURIComponent(uri)}`));\n        return;\n      }\n    // TODO: Error page, user\n\n    default:\n      {\n        yield put(push(CONSTANTS.ROOT));\n      }\n  }\n}\nexport function* resetPassword(actions) {\n  const {\n    Username\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPassword(Username);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse)); // yield put(push(`${CONSTANTS.FORGOT_PASSWORD}/${encodeURIComponent(Username)}`));\n  } catch (error) {\n    yield put(AuthSlice.resetPasswordFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* confirmPassword(actions) {\n  const {\n    Username,\n    SessionCode,\n    NewPassword\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPasswordSubmit(Username, SessionCode, NewPassword);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse)); // yield put(push(CONSTANTS.SIGNIN));\n\n    yield put(enqueueSnackbarAction({\n      message: 'Password changed successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.confirmPasswordFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* changePassword(actions) {\n  // console.log(actions);\n  const {\n    OldPassword,\n    NewPassword,\n    isAccount\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const user = yield Auth.currentAuthenticatedUser(); // eslint-disable-next-line no-undef\n\n    const authResponse = yield Auth.changePassword(user, OldPassword, NewPassword);\n    yield put(AuthSlice.changePasswordSuccess(authResponse));\n\n    if (!isAccount) {// yield put(push(CONSTANTS.SIGNIN));\n    }\n\n    yield put(enqueueSnackbarAction({\n      message: 'Password changed successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.changePasswordFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* updateUserAttributes(actions) {\n  const {\n    idToken\n  } = yield select(AuthSlice.selectUserSession);\n  const username = actions.payload['cognito:username']; // console.log(attributes);\n\n  const options = {\n    url: `${API.USERS_API}/${username}`,\n    method: 'put',\n    headers: {\n      Authorization: idToken.jwtToken\n    },\n    data: actions.payload\n  };\n\n  try {\n    const authResponse = yield call(axios, options); // console.log(authResponse);\n    // const user = yield Auth.currentAuthenticatedUser();\n    // const authResponse = yield Auth.updateUserAttributes(user, {\n    //   name,\n    //   family_name,\n    // });\n    // const currentSession = yield Auth.currentSession();\n    // yield put(AuthSlice.userSession(currentSession));\n\n    yield put(AuthSlice.updateUserAttributesSuccess(authResponse));\n    yield put(enqueueSnackbarAction({\n      message: 'Account updated successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.updateUserAttributesFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* validateInvite(actions) {\n  const options = {\n    url: API.VALIDATE_USER_INVITE_API,\n    method: 'post',\n    data: actions.payload\n  };\n\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.validateInviteSuccess(authResponse.data.data)); // yield put(push(CONSTANTS.CUSTOMERS));\n\n    yield put(enqueueSnackbarAction({\n      message: authResponse.data.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.validateInviteFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* deactivateUser(actions) {\n  const {\n    idToken\n  } = yield select(AuthSlice.selectUserSession);\n  const {\n    Username\n  } = actions.payload;\n  const options = {\n    url: `${API.USERS_API}/${Username}/deactivate`,\n    method: 'delete',\n    headers: {\n      Authorization: idToken.jwtToken\n    }\n  };\n\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.deactivateUserSuccess(authResponse.data.data));\n    yield put(enqueueSnackbarAction({\n      message: authResponse.data.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    })); // yield put(UserSlice.retrieveUsers({ customerid }));\n  } catch (error) {\n    yield put(AuthSlice.deactivateUserFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport default function* userSaga() {\n  yield takeLatest(AuthSlice.signIn.type, signIn);\n  yield takeLatest(AuthSlice.signUp.type, signUp);\n  yield takeLatest(AuthSlice.confirmSignUp.type, confirmSignUp);\n  yield takeLatest(AuthSlice.resetPassword.type, resetPassword);\n  yield takeLatest(AuthSlice.confirmPassword.type, confirmPassword);\n  yield takeLatest(AuthSlice.changePassword.type, changePassword);\n  yield takeLatest(AuthSlice.validateInvite.type, validateInvite);\n  yield takeLatest(AuthSlice.updateUserAttributes.type, updateUserAttributes);\n  yield takeLatest(AuthSlice.deactivateUser.type, deactivateUser);\n}","map":{"version":3,"sources":["/Users/lasimonne/Projects/syked.xyz/src/containers/Auth/saga.js"],"names":["call","put","takeLatest","select","Cookies","push","axios","AuthSlice","CONSTANTS","API","enqueueSnackbar","enqueueSnackbarAction","cookies","signIn","actions","body","payload","options","url","LOGIN_API","method","headers","data","JSON","stringify","authResponse","console","log","expires","Date","exp","set","JWT_NAME","token","DASHBOARD_PAGE","error","signUp","signUpSuccess","message","mobile_number","key","getTime","Math","random","variant","action","signUpFailed","confirmSignUp","email","confirmationCode","Auth","confirmSignUpSuccess","confirmSignUpFailed","loginSuccessSaga","signInUserSession","idToken","ROOT","resetPassword","Username","forgotPassword","resetPasswordSuccess","resetPasswordFailed","confirmPassword","SessionCode","NewPassword","forgotPasswordSubmit","confirmPasswordFailed","changePassword","OldPassword","isAccount","user","currentAuthenticatedUser","changePasswordSuccess","changePasswordFailed","updateUserAttributes","selectUserSession","username","USERS_API","Authorization","jwtToken","updateUserAttributesSuccess","updateUserAttributesFailed","validateInvite","VALIDATE_USER_INVITE_API","validateInviteSuccess","validateInviteFailed","deactivateUser","deactivateUserSuccess","deactivateUserFailed","userSaga","type"],"mappings":"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","sourcesContent":["import { call, put, takeLatest, select } from 'redux-saga/effects';\nimport { Cookies } from 'react-cookie';\nimport { push } from 'connected-react-router';\nimport axios from 'axios';\nimport * as AuthSlice from 'containers/Auth/authSlice';\n// import * as UserSlice from 'containers/Users/usersSlice';\nimport * as CONSTANTS from 'common/constants';\nimport * as API from 'common/api';\nimport {\n  enqueueSnackbar as enqueueSnackbarAction,\n  // closeSnackbar as closeSnackbarAction,\n} from 'components/Notifier/actions';\n// import { redirectSignin } from 'common/redirects';\n// const hostname = window && window.location && window.location.hostname;\n\nconst cookies = new Cookies();\n\nexport function* signIn(actions) {\n  const body = actions.payload;\n  const options = {\n    url: API.LOGIN_API,\n    method: 'POST',\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'application/json',\n    },\n    data: JSON.stringify(body),\n  };\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield call(axios, options);\n    // eslint-disable-next-line no-console\n    console.log(authResponse);\n    // eslint-disable-next-line no-undef\n    const expires = new Date(exp * 1000);\n    // eslint-disable-next-line no-undef\n    yield cookies.set(CONSTANTS.JWT_NAME, token, { expires });\n    yield put(push(CONSTANTS.DASHBOARD_PAGE));\n    // yield put(AuthSlice.signInSuccess(authResponse));\n\n    // const { challengeName } = authResponse;\n    // switch (challengeName && challengeName.value) {\n    //   case 'NEW_PASSWORD_REQUIRED': {\n    //     // yield put(push(`/change/${encodeURIComponent(Username)}`));\n    //     return;\n    //   }\n    //   default: {\n    //     yield call(loginSuccessSaga, authResponse);\n    //     yield put(\n    //       enqueueSnackbarAction({\n    //         message: 'Signed in successfully',\n    //         options: {\n    //           key: new Date().getTime() + Math.random(),\n    //           variant: 'success',\n    //           action: () => null,\n    //         },\n    //       }),\n    //     );\n    //   }\n    // }\n  } catch (error) {\n    // yield put(AuthSlice.signInFailed(error));\n    // yield put(\n    //   enqueueSnackbarAction({\n    //     message: error.message,\n    //     options: {\n    //       key: new Date().getTime() + Math.random(),\n    //       variant: 'error',\n    //       action: () => null,\n    //     },\n    //   }),\n    // );\n  }\n}\n\nexport function* signUp(actions) {\n  const body = actions.payload;\n  const options = {\n    url: API.LOGIN_API,\n    method: 'POST',\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'application/json',\n    },\n    data: JSON.stringify(body),\n  };\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.signUpSuccess(authResponse));\n    // redirect to verify\n    yield put(\n      enqueueSnackbarAction({\n        message: `Confirmation code successfully sent to ${body?.mobile_number}`,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.signUpFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* confirmSignUp(actions) {\n  const { email, confirmationCode } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.confirmSignUp(email, confirmationCode);\n    yield put(AuthSlice.confirmSignUpSuccess(authResponse));\n    // yield put(push(CONSTANTS.SIGNIN));\n    yield put(\n      enqueueSnackbarAction({\n        message: 'User confirmed successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.confirmSignUpFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* loginSuccessSaga(data) {\n  const { signInUserSession } = data;\n  const { payload } = signInUserSession.idToken;\n\n  switch (payload['cognito:groups'][0]) {\n    case 'SuperAdmin': {\n      // yield put(push(`/r/${encodeURIComponent(redirectSignin(hostname))}`));\n\n      return;\n    }\n    case 'Admin': {\n      // const uri = `${redirectSignin(hostname)}/${payload.profile}${CONSTANTS.DASHBOARD}`;\n      // yield put(push(`/r/${encodeURIComponent(uri)}`));\n\n      return;\n    }\n    case 'Consultant': {\n      // const uri = `${redirectSignin(hostname)}/${payload.profile}${CONSTANTS.DASHBOARD}`;\n      // yield put(push(`/r/${encodeURIComponent(uri)}`));\n\n      return;\n    }\n    // TODO: Error page, user\n    default: {\n      yield put(push(CONSTANTS.ROOT));\n    }\n  }\n}\n\nexport function* resetPassword(actions) {\n  const { Username } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPassword(Username);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse));\n    // yield put(push(`${CONSTANTS.FORGOT_PASSWORD}/${encodeURIComponent(Username)}`));\n  } catch (error) {\n    yield put(AuthSlice.resetPasswordFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* confirmPassword(actions) {\n  const { Username, SessionCode, NewPassword } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPasswordSubmit(Username, SessionCode, NewPassword);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse));\n    // yield put(push(CONSTANTS.SIGNIN));\n    yield put(\n      enqueueSnackbarAction({\n        message: 'Password changed successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.confirmPasswordFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* changePassword(actions) {\n  // console.log(actions);\n  const { OldPassword, NewPassword, isAccount } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const user = yield Auth.currentAuthenticatedUser();\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.changePassword(user, OldPassword, NewPassword);\n    yield put(AuthSlice.changePasswordSuccess(authResponse));\n    if (!isAccount) {\n      // yield put(push(CONSTANTS.SIGNIN));\n    }\n    yield put(\n      enqueueSnackbarAction({\n        message: 'Password changed successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.changePasswordFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* updateUserAttributes(actions) {\n  const { idToken } = yield select(AuthSlice.selectUserSession);\n  const username = actions.payload['cognito:username'];\n  // console.log(attributes);\n\n  const options = {\n    url: `${API.USERS_API}/${username}`,\n    method: 'put',\n    headers: {\n      Authorization: idToken.jwtToken,\n    },\n    data: actions.payload,\n  };\n\n  try {\n    const authResponse = yield call(axios, options);\n    // console.log(authResponse);\n    // const user = yield Auth.currentAuthenticatedUser();\n    // const authResponse = yield Auth.updateUserAttributes(user, {\n    //   name,\n    //   family_name,\n    // });\n    // const currentSession = yield Auth.currentSession();\n    // yield put(AuthSlice.userSession(currentSession));\n    yield put(AuthSlice.updateUserAttributesSuccess(authResponse));\n    yield put(\n      enqueueSnackbarAction({\n        message: 'Account updated successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.updateUserAttributesFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* validateInvite(actions) {\n  const options = {\n    url: API.VALIDATE_USER_INVITE_API,\n    method: 'post',\n    data: actions.payload,\n  };\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.validateInviteSuccess(authResponse.data.data));\n    // yield put(push(CONSTANTS.CUSTOMERS));\n    yield put(\n      enqueueSnackbarAction({\n        message: authResponse.data.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.validateInviteFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* deactivateUser(actions) {\n  const { idToken } = yield select(AuthSlice.selectUserSession);\n  const { Username } = actions.payload;\n  const options = {\n    url: `${API.USERS_API}/${Username}/deactivate`,\n    method: 'delete',\n    headers: {\n      Authorization: idToken.jwtToken,\n    },\n  };\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.deactivateUserSuccess(authResponse.data.data));\n    yield put(\n      enqueueSnackbarAction({\n        message: authResponse.data.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n    // yield put(UserSlice.retrieveUsers({ customerid }));\n  } catch (error) {\n    yield put(AuthSlice.deactivateUserFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport default function* userSaga() {\n  yield takeLatest(AuthSlice.signIn.type, signIn);\n  yield takeLatest(AuthSlice.signUp.type, signUp);\n  yield takeLatest(AuthSlice.confirmSignUp.type, confirmSignUp);\n  yield takeLatest(AuthSlice.resetPassword.type, resetPassword);\n  yield takeLatest(AuthSlice.confirmPassword.type, confirmPassword);\n  yield takeLatest(AuthSlice.changePassword.type, changePassword);\n  yield takeLatest(AuthSlice.validateInvite.type, validateInvite);\n  yield takeLatest(AuthSlice.updateUserAttributes.type, updateUserAttributes);\n  yield takeLatest(AuthSlice.deactivateUser.type, deactivateUser);\n}\n"]},"metadata":{},"sourceType":"module"}