{"ast":null,"code":"var _jsxFileName = \"/Users/lasimonne/Projects/syked.xyz/src/App.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Cookies } from 'react-cookie';\nimport { compose } from 'redux';\nimport { connect, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { selectIsAuthenticated // selectUser,\n, userHasAuthenticated as userHasAuthenticatedAction, userSession as userSessionAction } from 'containers/Auth/authSlice';\nimport Notifier from 'components/Notifier';\nimport * as CONSTANTS from 'common/constants';\nimport Routes from './Routes';\nimport './App.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App({\n  userHasAuthenticated,\n  setUserSession\n}) {\n  _s();\n\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n  const [isAuthenticating, setIsAuthenticating] = useState(true);\n  const cookies = new Cookies();\n  const onLoad = useCallback(async () => {\n    try {\n      const token = cookies.get(CONSTANTS.JWT_NAME);\n      const currentSession = JSON.parse(atob(token.split('.')[1]));\n      setUserSession(currentSession);\n      userHasAuthenticated(true);\n    } catch (e) {\n      if (e !== 'No current user') {// console.log(e);\n      }\n    }\n\n    setIsAuthenticating(false);\n  }, [setUserSession, userHasAuthenticated]);\n  useEffect(() => {\n    onLoad();\n  }, [onLoad, isAuthenticated]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Routes, {\n      appProps: {\n        isAuthenticated,\n        userHasAuthenticated\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notifier, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"DDTf9Rg80MbchAEDgcw/BVLtr8M=\", false, function () {\n  return [useSelector];\n});\n\n_c = App;\nApp.propTypes = {\n  userHasAuthenticated: PropTypes.func,\n  setUserSession: PropTypes.func\n};\n\nconst mapDispatchToProps = dispatch => ({\n  userHasAuthenticated: values => dispatch(userHasAuthenticatedAction(values)),\n  setUserSession: values => dispatch(userSessionAction(values))\n});\n\nconst withConnect = connect(null, mapDispatchToProps);\nexport default compose(withRouter, withConnect)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lasimonne/Projects/syked.xyz/src/App.js"],"names":["React","useState","useEffect","useCallback","PropTypes","Cookies","compose","connect","useSelector","withRouter","selectIsAuthenticated","userHasAuthenticated","userHasAuthenticatedAction","userSession","userSessionAction","Notifier","CONSTANTS","Routes","App","setUserSession","isAuthenticated","isAuthenticating","setIsAuthenticating","cookies","onLoad","token","get","JWT_NAME","currentSession","JSON","parse","atob","split","e","propTypes","func","mapDispatchToProps","dispatch","values","withConnect"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,SACEC,qBADF,CAEE;AAFF,EAGEC,oBAAoB,IAAIC,0BAH1B,EAIEC,WAAW,IAAIC,iBAJjB,QAKO,2BALP;AAMA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAO,KAAKC,SAAZ,MAA2B,kBAA3B;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,YAAP;;;;AACA,SAASC,GAAT,CAAa;AAAEP,EAAAA,oBAAF;AAAwBQ,EAAAA;AAAxB,CAAb,EAAuD;AAAA;;AACrD,QAAMC,eAAe,GAAGZ,WAAW,CAACE,qBAAD,CAAnC;AACA,QAAM,CAACW,gBAAD,EAAmBC,mBAAnB,IAA0CrB,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAMsB,OAAO,GAAG,IAAIlB,OAAJ,EAAhB;AAEA,QAAMmB,MAAM,GAAGrB,WAAW,CAAC,YAAY;AACrC,QAAI;AACF,YAAMsB,KAAK,GAAGF,OAAO,CAACG,GAAR,CAAYV,SAAS,CAACW,QAAtB,CAAd;AACA,YAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACN,KAAK,CAACO,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAf,CAAvB;AACAb,MAAAA,cAAc,CAACS,cAAD,CAAd;AACAjB,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD,KALD,CAKE,OAAOsB,CAAP,EAAU;AACV,UAAIA,CAAC,KAAK,iBAAV,EAA6B,CAC3B;AACD;AACF;;AACDX,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,GAZyB,EAYvB,CAACH,cAAD,EAAiBR,oBAAjB,CAZuB,CAA1B;AAcAT,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,MAAM;AACP,GAFQ,EAEN,CAACA,MAAD,EAASJ,eAAT,CAFM,CAAT;AAIA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAE;AAAEA,QAAAA,eAAF;AAAmBT,QAAAA;AAAnB;AAAlB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;;GA7BQO,G;UACiBV,W;;;KADjBU,G;AA+BTA,GAAG,CAACgB,SAAJ,GAAgB;AACdvB,EAAAA,oBAAoB,EAAEP,SAAS,CAAC+B,IADlB;AAEdhB,EAAAA,cAAc,EAAEf,SAAS,CAAC+B;AAFZ,CAAhB;;AAKA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxC1B,EAAAA,oBAAoB,EAAG2B,MAAD,IAAYD,QAAQ,CAACzB,0BAA0B,CAAC0B,MAAD,CAA3B,CADF;AAExCnB,EAAAA,cAAc,EAAGmB,MAAD,IAAYD,QAAQ,CAACvB,iBAAiB,CAACwB,MAAD,CAAlB;AAFI,CAAf,CAA3B;;AAKA,MAAMC,WAAW,GAAGhC,OAAO,CAAC,IAAD,EAAO6B,kBAAP,CAA3B;AAEA,eAAe9B,OAAO,CAACG,UAAD,EAAa8B,WAAb,CAAP,CAAiCrB,GAAjC,CAAf","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Cookies } from 'react-cookie';\nimport { compose } from 'redux';\nimport { connect, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport {\n  selectIsAuthenticated,\n  // selectUser,\n  userHasAuthenticated as userHasAuthenticatedAction,\n  userSession as userSessionAction,\n} from 'containers/Auth/authSlice';\nimport Notifier from 'components/Notifier';\nimport * as CONSTANTS from 'common/constants';\n\nimport Routes from './Routes';\nimport './App.scss';\nfunction App({ userHasAuthenticated, setUserSession }) {\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n  const [isAuthenticating, setIsAuthenticating] = useState(true);\n  const cookies = new Cookies();\n\n  const onLoad = useCallback(async () => {\n    try {\n      const token = cookies.get(CONSTANTS.JWT_NAME);\n      const currentSession = JSON.parse(atob(token.split('.')[1]));\n      setUserSession(currentSession);\n      userHasAuthenticated(true);\n    } catch (e) {\n      if (e !== 'No current user') {\n        // console.log(e);\n      }\n    }\n    setIsAuthenticating(false);\n  }, [setUserSession, userHasAuthenticated]);\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad, isAuthenticated]);\n\n  return (\n    <>\n      <Routes appProps={{ isAuthenticated, userHasAuthenticated }} />\n      <Notifier />\n    </>\n  );\n}\n\nApp.propTypes = {\n  userHasAuthenticated: PropTypes.func,\n  setUserSession: PropTypes.func,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  userHasAuthenticated: (values) => dispatch(userHasAuthenticatedAction(values)),\n  setUserSession: (values) => dispatch(userSessionAction(values)),\n});\n\nconst withConnect = connect(null, mapDispatchToProps);\n\nexport default compose(withRouter, withConnect)(App);\n"]},"metadata":{},"sourceType":"module"}