{"ast":null,"code":"import { call, put, takeLatest, select } from 'redux-saga/effects';\nimport { Cookies } from 'react-cookie';\nimport { push } from 'connected-react-router';\nimport axios from 'axios';\nimport * as AuthSlice from 'containers/Auth/authSlice'; // import * as UserSlice from 'containers/Users/usersSlice';\n\nimport * as CONSTANTS from 'common/constants';\nimport * as API from 'common/api';\nimport { enqueueSnackbar as enqueueSnackbarAction // closeSnackbar as closeSnackbarAction,\n} from 'components/Notifier/actions'; // import { redirectSignin } from 'common/redirects';\n// const hostname = window && window.location && window.location.hostname;\n\nconst cookies = new Cookies();\nexport function* signIn(actions) {\n  const body = actions.payload;\n  const options = {\n    url: API.LOGIN_API,\n    method: 'POST',\n    data: JSON.stringify(body)\n  };\n\n  try {\n    var _authResponse$data, _authResponse$data$da, _authResponse$data$da2;\n\n    const authResponse = yield call(axios, options);\n\n    if (authResponse === null || authResponse === void 0 ? void 0 : (_authResponse$data = authResponse.data) === null || _authResponse$data === void 0 ? void 0 : (_authResponse$data$da = _authResponse$data.data) === null || _authResponse$data$da === void 0 ? void 0 : (_authResponse$data$da2 = _authResponse$data$da.AuthenticationResult) === null || _authResponse$data$da2 === void 0 ? void 0 : _authResponse$data$da2.IdToken) {\n      var _authResponse$data2, _authResponse$data2$d, _authResponse$data2$d2, _authResponse$data3;\n\n      const token = authResponse === null || authResponse === void 0 ? void 0 : (_authResponse$data2 = authResponse.data) === null || _authResponse$data2 === void 0 ? void 0 : (_authResponse$data2$d = _authResponse$data2.data) === null || _authResponse$data2$d === void 0 ? void 0 : (_authResponse$data2$d2 = _authResponse$data2$d.AuthenticationResult) === null || _authResponse$data2$d2 === void 0 ? void 0 : _authResponse$data2$d2.IdToken;\n      const {\n        exp\n      } = JSON.parse(atob(token.split('.')[1]));\n      const expires = new Date(exp * 1000);\n      yield cookies.set(CONSTANTS.JWT_NAME, token, {\n        path: '/',\n        expires\n      });\n      yield put(AuthSlice.signInSuccess(authResponse === null || authResponse === void 0 ? void 0 : (_authResponse$data3 = authResponse.data) === null || _authResponse$data3 === void 0 ? void 0 : _authResponse$data3.data));\n      yield put(push(CONSTANTS.DASHBOARD_PAGE));\n      yield put(enqueueSnackbarAction({\n        message: 'Login successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null\n        }\n      }));\n    } else {\n      const error = 'You have entered wrong credentials.';\n      yield put(AuthSlice.signInFailed(error));\n    }\n  } catch (error) {\n    yield put(AuthSlice.signInFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* googleLogin(actions) {\n  const body = actions.payload;\n  const options = {\n    url: API.GOOGLE_LOGIN_API,\n    method: 'POST',\n    data: JSON.stringify(body)\n  };\n\n  try {\n    // eslint-disable-next-line no-unused-vars\n    const authResponse = yield call(axios, options); // console.log(authResponse);\n  } catch (error) {\n    // console.log(error.name);\n    // console.log(error.message);\n    yield put(AuthSlice.googleLoginFailed(error));\n  }\n}\nexport function* signOut() {\n  try {\n    const expires = new Date();\n    yield cookies.remove(CONSTANTS.JWT_NAME, {\n      path: '/',\n      expires\n    });\n    yield put(AuthSlice.signOutSuccess());\n    yield put(push(CONSTANTS.LOGIN_PAGE));\n    yield put(enqueueSnackbarAction({\n      message: 'Logout successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.signOutFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error === null || error === void 0 ? void 0 : error.message,\n      options: {\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        },\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* signUp(actions) {\n  const body = actions.payload;\n  const options = {\n    url: API.LOGIN_API,\n    method: 'POST',\n    data: JSON.stringify(body)\n  };\n\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.signUpSuccess(authResponse)); // redirect to verify\n\n    yield put(push(CONSTANTS.VERIFICATION_PAGE));\n    yield put(enqueueSnackbarAction({\n      message: `Confirmation code successfully sent to ${body === null || body === void 0 ? void 0 : body.mobile_number}`,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.signUpFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* confirmSignUp(actions) {\n  const {\n    email,\n    confirmationCode\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.confirmSignUp(email, confirmationCode);\n    yield put(AuthSlice.confirmSignUpSuccess(authResponse)); // yield put(push(CONSTANTS.SIGNIN));\n\n    yield put(enqueueSnackbarAction({\n      message: 'User confirmed successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.confirmSignUpFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* loginSuccessSaga(data) {\n  const {\n    signInUserSession\n  } = data;\n  const {\n    payload\n  } = signInUserSession.idToken;\n\n  switch (payload['cognito:groups'][0]) {\n    case 'SuperAdmin':\n      {\n        // yield put(push(VERIFICATION_PAGE));\n        return;\n      }\n\n    case 'Admin':\n      {\n        // const uri = `${redirectSignin(hostname)}/${payload.profile}${CONSTANTS.DASHBOARD}`;\n        // yield put(push(`/r/${encodeURIComponent(uri)}`));\n        return;\n      }\n\n    case 'Consultant':\n      {\n        // const uri = `${redirectSignin(hostname)}/${payload.profile}${CONSTANTS.DASHBOARD}`;\n        // yield put(push(`/r/${encodeURIComponent(uri)}`));\n        return;\n      }\n    // TODO: Error page, user\n\n    default:\n      {\n        yield put(push(CONSTANTS.ROOT));\n      }\n  }\n}\nexport function* resetPassword(actions) {\n  const {\n    Username\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPassword(Username);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse)); // yield put(push(`${CONSTANTS.FORGOT_PASSWORD}/${encodeURIComponent(Username)}`));\n  } catch (error) {\n    yield put(AuthSlice.resetPasswordFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* confirmPassword(actions) {\n  const {\n    Username,\n    SessionCode,\n    NewPassword\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPasswordSubmit(Username, SessionCode, NewPassword);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse)); // yield put(push(CONSTANTS.SIGNIN));\n\n    yield put(enqueueSnackbarAction({\n      message: 'Password changed successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.confirmPasswordFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* changePassword(actions) {\n  // console.log(actions);\n  const {\n    OldPassword,\n    NewPassword,\n    isAccount\n  } = actions.payload;\n\n  try {\n    // eslint-disable-next-line no-undef\n    const user = yield Auth.currentAuthenticatedUser(); // eslint-disable-next-line no-undef\n\n    const authResponse = yield Auth.changePassword(user, OldPassword, NewPassword);\n    yield put(AuthSlice.changePasswordSuccess(authResponse));\n\n    if (!isAccount) {// yield put(push(CONSTANTS.SIGNIN));\n    }\n\n    yield put(enqueueSnackbarAction({\n      message: 'Password changed successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.changePasswordFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* updateUserAttributes(actions) {\n  const {\n    idToken\n  } = yield select(AuthSlice.selectUserSession);\n  const username = actions.payload['cognito:username']; // console.log(attributes);\n\n  const options = {\n    url: `${API.USERS_API}/${username}`,\n    method: 'put',\n    headers: {\n      Authorization: idToken.jwtToken\n    },\n    data: actions.payload\n  };\n\n  try {\n    const authResponse = yield call(axios, options); // console.log(authResponse);\n    // const user = yield Auth.currentAuthenticatedUser();\n    // const authResponse = yield Auth.updateUserAttributes(user, {\n    //   name,\n    //   family_name,\n    // });\n    // const currentSession = yield Auth.currentSession();\n    // yield put(AuthSlice.userSession(currentSession));\n\n    yield put(AuthSlice.updateUserAttributesSuccess(authResponse));\n    yield put(enqueueSnackbarAction({\n      message: 'Account updated successfully',\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.updateUserAttributesFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* validateInvite(actions) {\n  const options = {\n    url: API.VALIDATE_USER_INVITE_API,\n    method: 'post',\n    data: actions.payload\n  };\n\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.validateInviteSuccess(authResponse.data.data)); // yield put(push(CONSTANTS.CUSTOMERS));\n\n    yield put(enqueueSnackbarAction({\n      message: authResponse.data.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    }));\n  } catch (error) {\n    yield put(AuthSlice.validateInviteFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport function* deactivateUser(actions) {\n  const {\n    idToken\n  } = yield select(AuthSlice.selectUserSession);\n  const {\n    Username\n  } = actions.payload;\n  const options = {\n    url: `${API.USERS_API}/${Username}/deactivate`,\n    method: 'delete',\n    headers: {\n      Authorization: idToken.jwtToken\n    }\n  };\n\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.deactivateUserSuccess(authResponse.data.data));\n    yield put(enqueueSnackbarAction({\n      message: authResponse.data.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'success',\n        action: () => null\n      }\n    })); // yield put(UserSlice.retrieveUsers({ customerid }));\n  } catch (error) {\n    yield put(AuthSlice.deactivateUserFailed(error));\n    yield put(enqueueSnackbarAction({\n      message: error.message,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n        action: () => null\n      }\n    }));\n  }\n}\nexport default function* userSaga() {\n  yield takeLatest(AuthSlice.signIn.type, signIn);\n  yield takeLatest(AuthSlice.googleLogin.type, googleLogin);\n  yield takeLatest(AuthSlice.signOut.type, signOut);\n  yield takeLatest(AuthSlice.signUp.type, signUp);\n  yield takeLatest(AuthSlice.confirmSignUp.type, confirmSignUp);\n  yield takeLatest(AuthSlice.resetPassword.type, resetPassword);\n  yield takeLatest(AuthSlice.confirmPassword.type, confirmPassword);\n  yield takeLatest(AuthSlice.changePassword.type, changePassword);\n  yield takeLatest(AuthSlice.validateInvite.type, validateInvite);\n  yield takeLatest(AuthSlice.updateUserAttributes.type, updateUserAttributes);\n  yield takeLatest(AuthSlice.deactivateUser.type, deactivateUser);\n}","map":{"version":3,"sources":["/Users/lasimonne/Projects/syked.xyz/src/containers/Auth/saga.js"],"names":["call","put","takeLatest","select","Cookies","push","axios","AuthSlice","CONSTANTS","API","enqueueSnackbar","enqueueSnackbarAction","cookies","signIn","actions","body","payload","options","url","LOGIN_API","method","data","JSON","stringify","authResponse","AuthenticationResult","IdToken","token","exp","parse","atob","split","expires","Date","set","JWT_NAME","path","signInSuccess","DASHBOARD_PAGE","message","key","getTime","Math","random","variant","action","error","signInFailed","googleLogin","GOOGLE_LOGIN_API","googleLoginFailed","signOut","remove","signOutSuccess","LOGIN_PAGE","signOutFailed","anchorOrigin","vertical","horizontal","signUp","signUpSuccess","VERIFICATION_PAGE","mobile_number","signUpFailed","confirmSignUp","email","confirmationCode","Auth","confirmSignUpSuccess","confirmSignUpFailed","loginSuccessSaga","signInUserSession","idToken","ROOT","resetPassword","Username","forgotPassword","resetPasswordSuccess","resetPasswordFailed","confirmPassword","SessionCode","NewPassword","forgotPasswordSubmit","confirmPasswordFailed","changePassword","OldPassword","isAccount","user","currentAuthenticatedUser","changePasswordSuccess","changePasswordFailed","updateUserAttributes","selectUserSession","username","USERS_API","headers","Authorization","jwtToken","updateUserAttributesSuccess","updateUserAttributesFailed","validateInvite","VALIDATE_USER_INVITE_API","validateInviteSuccess","validateInviteFailed","deactivateUser","deactivateUserSuccess","deactivateUserFailed","userSaga","type"],"mappings":"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","sourcesContent":["import { call, put, takeLatest, select } from 'redux-saga/effects';\nimport { Cookies } from 'react-cookie';\nimport { push } from 'connected-react-router';\nimport axios from 'axios';\nimport * as AuthSlice from 'containers/Auth/authSlice';\n// import * as UserSlice from 'containers/Users/usersSlice';\nimport * as CONSTANTS from 'common/constants';\nimport * as API from 'common/api';\nimport {\n  enqueueSnackbar as enqueueSnackbarAction,\n  // closeSnackbar as closeSnackbarAction,\n} from 'components/Notifier/actions';\n// import { redirectSignin } from 'common/redirects';\n// const hostname = window && window.location && window.location.hostname;\n\nconst cookies = new Cookies();\n\nexport function* signIn(actions) {\n  const body = actions.payload;\n  const options = {\n    url: API.LOGIN_API,\n    method: 'POST',\n    data: JSON.stringify(body),\n  };\n  try {\n    const authResponse = yield call(axios, options);\n    if (authResponse?.data?.data?.AuthenticationResult?.IdToken) {\n      const token = authResponse?.data?.data?.AuthenticationResult?.IdToken;\n      const { exp } = JSON.parse(atob(token.split('.')[1]));\n      const expires = new Date(exp * 1000);\n      yield cookies.set(CONSTANTS.JWT_NAME, token, { path: '/', expires });\n      yield put(AuthSlice.signInSuccess(authResponse?.data?.data));\n      yield put(push(CONSTANTS.DASHBOARD_PAGE));\n      yield put(\n        enqueueSnackbarAction({\n          message: 'Login successfully',\n          options: {\n            key: new Date().getTime() + Math.random(),\n            variant: 'success',\n            action: () => null,\n          },\n        }),\n      );\n    } else {\n      const error = 'You have entered wrong credentials.';\n      yield put(AuthSlice.signInFailed(error));\n    }\n  } catch (error) {\n    yield put(AuthSlice.signInFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* googleLogin(actions) {\n  const body = actions.payload;\n  const options = {\n    url: API.GOOGLE_LOGIN_API,\n    method: 'POST',\n    data: JSON.stringify(body),\n  };\n  try {\n    // eslint-disable-next-line no-unused-vars\n    const authResponse = yield call(axios, options);\n    // console.log(authResponse);\n  } catch (error) {\n    // console.log(error.name);\n    // console.log(error.message);\n    yield put(AuthSlice.googleLoginFailed(error));\n  }\n}\n\nexport function* signOut() {\n  try {\n    const expires = new Date();\n    yield cookies.remove(CONSTANTS.JWT_NAME, { path: '/', expires });\n    yield put(AuthSlice.signOutSuccess());\n    yield put(push(CONSTANTS.LOGIN_PAGE));\n    yield put(\n      enqueueSnackbarAction({\n        message: 'Logout successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.signOutFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error?.message,\n        options: {\n          anchorOrigin: {\n            vertical: 'top',\n            horizontal: 'right',\n          },\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* signUp(actions) {\n  const body = actions.payload;\n  const options = {\n    url: API.LOGIN_API,\n    method: 'POST',\n    data: JSON.stringify(body),\n  };\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.signUpSuccess(authResponse));\n    // redirect to verify\n    yield put(push(CONSTANTS.VERIFICATION_PAGE));\n    yield put(\n      enqueueSnackbarAction({\n        message: `Confirmation code successfully sent to ${body?.mobile_number}`,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.signUpFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* confirmSignUp(actions) {\n  const { email, confirmationCode } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.confirmSignUp(email, confirmationCode);\n    yield put(AuthSlice.confirmSignUpSuccess(authResponse));\n    // yield put(push(CONSTANTS.SIGNIN));\n    yield put(\n      enqueueSnackbarAction({\n        message: 'User confirmed successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.confirmSignUpFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* loginSuccessSaga(data) {\n  const { signInUserSession } = data;\n  const { payload } = signInUserSession.idToken;\n\n  switch (payload['cognito:groups'][0]) {\n    case 'SuperAdmin': {\n      // yield put(push(VERIFICATION_PAGE));\n\n      return;\n    }\n    case 'Admin': {\n      // const uri = `${redirectSignin(hostname)}/${payload.profile}${CONSTANTS.DASHBOARD}`;\n      // yield put(push(`/r/${encodeURIComponent(uri)}`));\n\n      return;\n    }\n    case 'Consultant': {\n      // const uri = `${redirectSignin(hostname)}/${payload.profile}${CONSTANTS.DASHBOARD}`;\n      // yield put(push(`/r/${encodeURIComponent(uri)}`));\n\n      return;\n    }\n    // TODO: Error page, user\n    default: {\n      yield put(push(CONSTANTS.ROOT));\n    }\n  }\n}\n\nexport function* resetPassword(actions) {\n  const { Username } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPassword(Username);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse));\n    // yield put(push(`${CONSTANTS.FORGOT_PASSWORD}/${encodeURIComponent(Username)}`));\n  } catch (error) {\n    yield put(AuthSlice.resetPasswordFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* confirmPassword(actions) {\n  const { Username, SessionCode, NewPassword } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.forgotPasswordSubmit(Username, SessionCode, NewPassword);\n    yield put(AuthSlice.resetPasswordSuccess(authResponse));\n    // yield put(push(CONSTANTS.SIGNIN));\n    yield put(\n      enqueueSnackbarAction({\n        message: 'Password changed successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.confirmPasswordFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* changePassword(actions) {\n  // console.log(actions);\n  const { OldPassword, NewPassword, isAccount } = actions.payload;\n  try {\n    // eslint-disable-next-line no-undef\n    const user = yield Auth.currentAuthenticatedUser();\n    // eslint-disable-next-line no-undef\n    const authResponse = yield Auth.changePassword(user, OldPassword, NewPassword);\n    yield put(AuthSlice.changePasswordSuccess(authResponse));\n    if (!isAccount) {\n      // yield put(push(CONSTANTS.SIGNIN));\n    }\n    yield put(\n      enqueueSnackbarAction({\n        message: 'Password changed successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.changePasswordFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* updateUserAttributes(actions) {\n  const { idToken } = yield select(AuthSlice.selectUserSession);\n  const username = actions.payload['cognito:username'];\n  // console.log(attributes);\n\n  const options = {\n    url: `${API.USERS_API}/${username}`,\n    method: 'put',\n    headers: {\n      Authorization: idToken.jwtToken,\n    },\n    data: actions.payload,\n  };\n\n  try {\n    const authResponse = yield call(axios, options);\n    // console.log(authResponse);\n    // const user = yield Auth.currentAuthenticatedUser();\n    // const authResponse = yield Auth.updateUserAttributes(user, {\n    //   name,\n    //   family_name,\n    // });\n    // const currentSession = yield Auth.currentSession();\n    // yield put(AuthSlice.userSession(currentSession));\n    yield put(AuthSlice.updateUserAttributesSuccess(authResponse));\n    yield put(\n      enqueueSnackbarAction({\n        message: 'Account updated successfully',\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.updateUserAttributesFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* validateInvite(actions) {\n  const options = {\n    url: API.VALIDATE_USER_INVITE_API,\n    method: 'post',\n    data: actions.payload,\n  };\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.validateInviteSuccess(authResponse.data.data));\n    // yield put(push(CONSTANTS.CUSTOMERS));\n    yield put(\n      enqueueSnackbarAction({\n        message: authResponse.data.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n  } catch (error) {\n    yield put(AuthSlice.validateInviteFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport function* deactivateUser(actions) {\n  const { idToken } = yield select(AuthSlice.selectUserSession);\n  const { Username } = actions.payload;\n  const options = {\n    url: `${API.USERS_API}/${Username}/deactivate`,\n    method: 'delete',\n    headers: {\n      Authorization: idToken.jwtToken,\n    },\n  };\n  try {\n    const authResponse = yield call(axios, options);\n    yield put(AuthSlice.deactivateUserSuccess(authResponse.data.data));\n    yield put(\n      enqueueSnackbarAction({\n        message: authResponse.data.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'success',\n          action: () => null,\n        },\n      }),\n    );\n    // yield put(UserSlice.retrieveUsers({ customerid }));\n  } catch (error) {\n    yield put(AuthSlice.deactivateUserFailed(error));\n    yield put(\n      enqueueSnackbarAction({\n        message: error.message,\n        options: {\n          key: new Date().getTime() + Math.random(),\n          variant: 'error',\n          action: () => null,\n        },\n      }),\n    );\n  }\n}\n\nexport default function* userSaga() {\n  yield takeLatest(AuthSlice.signIn.type, signIn);\n  yield takeLatest(AuthSlice.googleLogin.type, googleLogin);\n  yield takeLatest(AuthSlice.signOut.type, signOut);\n  yield takeLatest(AuthSlice.signUp.type, signUp);\n  yield takeLatest(AuthSlice.confirmSignUp.type, confirmSignUp);\n  yield takeLatest(AuthSlice.resetPassword.type, resetPassword);\n  yield takeLatest(AuthSlice.confirmPassword.type, confirmPassword);\n  yield takeLatest(AuthSlice.changePassword.type, changePassword);\n  yield takeLatest(AuthSlice.validateInvite.type, validateInvite);\n  yield takeLatest(AuthSlice.updateUserAttributes.type, updateUserAttributes);\n  yield takeLatest(AuthSlice.deactivateUser.type, deactivateUser);\n}\n"]},"metadata":{},"sourceType":"module"}