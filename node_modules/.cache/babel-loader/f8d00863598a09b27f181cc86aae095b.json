{"ast":null,"code":"var _jsxFileName = \"/Users/lasimonne/Projects/syked.xyz/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect, useSelector } from 'react-redux';\nimport Routes from 'Routes';\nimport { selectIsAuthenticated // selectUser,\n, userHasAuthenticated as userHasAuthenticatedAction // userSession as userSessionAction,\n} from 'containers/Auth/authSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App({\n  userHasAuthenticated\n}) {\n  _s();\n\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    appProps: {\n      isAuthenticated,\n      userHasAuthenticated\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 10\n  }, this);\n}\n\n_s(App, \"Tis/laFBs1mUsdamrhCn/+4kssg=\", false, function () {\n  return [useSelector];\n});\n\n_c = App;\nApp.propTypes = {\n  userHasAuthenticated: PropTypes.func\n};\n\nconst mapDispatchToProps = dispatch => ({\n  userHasAuthenticated: values => dispatch(userHasAuthenticatedAction(values))\n});\n\nconst withConnect = connect(null, mapDispatchToProps);\nexport default compose(withConnect)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lasimonne/Projects/syked.xyz/src/App.js"],"names":["React","PropTypes","compose","connect","useSelector","Routes","selectIsAuthenticated","userHasAuthenticated","userHasAuthenticatedAction","App","isAuthenticated","propTypes","func","mapDispatchToProps","dispatch","values","withConnect"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SACEC,qBADF,CAEE;AAFF,EAGEC,oBAAoB,IAAIC,0BAH1B,CAIE;AAJF,OAKO,2BALP;;;AAOA,SAASC,GAAT,CAAa;AAAEF,EAAAA;AAAF,CAAb,EAAuC;AAAA;;AACrC,QAAMG,eAAe,GAAGN,WAAW,CAACE,qBAAD,CAAnC;AACA,sBAAO,QAAC,MAAD;AAAQ,IAAA,QAAQ,EAAE;AAAEI,MAAAA,eAAF;AAAmBH,MAAAA;AAAnB;AAAlB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAHQE,G;UACiBL,W;;;KADjBK,G;AAKTA,GAAG,CAACE,SAAJ,GAAgB;AACdJ,EAAAA,oBAAoB,EAAEN,SAAS,CAACW;AADlB,CAAhB;;AAIA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCP,EAAAA,oBAAoB,EAAGQ,MAAD,IAAYD,QAAQ,CAACN,0BAA0B,CAACO,MAAD,CAA3B;AADF,CAAf,CAA3B;;AAIA,MAAMC,WAAW,GAAGb,OAAO,CAAC,IAAD,EAAOU,kBAAP,CAA3B;AAEA,eAAeX,OAAO,CAACc,WAAD,CAAP,CAAqBP,GAArB,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect, useSelector } from 'react-redux';\nimport Routes from 'Routes';\nimport {\n  selectIsAuthenticated,\n  // selectUser,\n  userHasAuthenticated as userHasAuthenticatedAction,\n  // userSession as userSessionAction,\n} from 'containers/Auth/authSlice';\n\nfunction App({ userHasAuthenticated }) {\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n  return <Routes appProps={{ isAuthenticated, userHasAuthenticated }} />;\n}\n\nApp.propTypes = {\n  userHasAuthenticated: PropTypes.func,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  userHasAuthenticated: (values) => dispatch(userHasAuthenticatedAction(values)),\n});\n\nconst withConnect = connect(null, mapDispatchToProps);\n\nexport default compose(withConnect)(App);\n"]},"metadata":{},"sourceType":"module"}