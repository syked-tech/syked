{"ast":null,"code":"import{configureStore,combineReducers}from'@reduxjs/toolkit';import{connectRouter,routerMiddleware}from'connected-react-router';import createSagaMiddleware from'redux-saga';import history from'common/history';import{apiMiddleware}from'redux-api-middleware';import notifications from'components/Notifier/reducer';import finalForm from'common/util/finalFormDuck';import authReducer from'containers/Auth/authSlice';import therapistReducer from'containers/Therapist/therapistSlice';// import customerReducer from 'containers/Customers/customerSlice';\n// import policiesReducer from 'containers/Policies/policiesSlice';\n// import usersReducer from 'containers/Users/usersSlice';\nimport authSaga from'containers/Auth/saga';import therapistSaga from'containers/Therapist/saga';// import customerSaga from 'containers/Customers/saga';\n// import policiesSaga from 'containers/Policies/saga';\n// import userSaga from 'containers/Users/saga';\nvar sagaMiddleware=createSagaMiddleware();var router=routerMiddleware(history);var rootReducer=combineReducers({finalForm:finalForm,notifier:notifications,auth:authReducer,therapist:therapistReducer,// customer: customerReducer,\n// policy: policiesReducer,\n// user: usersReducer,\nrouter:connectRouter(history)});export var store=configureStore({reducer:rootReducer,middleware:[sagaMiddleware,apiMiddleware,router]});sagaMiddleware.run(authSaga);sagaMiddleware.run(therapistSaga);// sagaMiddleware.run(policiesSaga);\n// sagaMiddleware.run(userSaga);\nexport default store;","map":{"version":3,"sources":["/Users/lasimonne/Projects/syked.xyz copy/src/common/store.js"],"names":["configureStore","combineReducers","connectRouter","routerMiddleware","createSagaMiddleware","history","apiMiddleware","notifications","finalForm","authReducer","therapistReducer","authSaga","therapistSaga","sagaMiddleware","router","rootReducer","notifier","auth","therapist","store","reducer","middleware","run"],"mappings":"AAAA,OAASA,cAAT,CAAyBC,eAAzB,KAAgD,kBAAhD,CACA,OAASC,aAAT,CAAwBC,gBAAxB,KAAgD,wBAAhD,CACA,MAAOC,CAAAA,oBAAP,KAAiC,YAAjC,CACA,MAAOC,CAAAA,OAAP,KAAoB,gBAApB,CACA,OAASC,aAAT,KAA8B,sBAA9B,CACA,MAAOC,CAAAA,aAAP,KAA0B,6BAA1B,CACA,MAAOC,CAAAA,SAAP,KAAsB,2BAAtB,CACA,MAAOC,CAAAA,WAAP,KAAwB,2BAAxB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,qCAA7B,CACA;AACA;AACA;AACA,MAAOC,CAAAA,QAAP,KAAqB,sBAArB,CACA,MAAOC,CAAAA,aAAP,KAA0B,2BAA1B,CACA;AACA;AACA;AAEA,GAAMC,CAAAA,cAAc,CAAGT,oBAAoB,EAA3C,CACA,GAAMU,CAAAA,MAAM,CAAGX,gBAAgB,CAACE,OAAD,CAA/B,CAEA,GAAMU,CAAAA,WAAW,CAAGd,eAAe,CAAC,CAClCO,SAAS,CAATA,SADkC,CAElCQ,QAAQ,CAAET,aAFwB,CAGlCU,IAAI,CAAER,WAH4B,CAIlCS,SAAS,CAAER,gBAJuB,CAKlC;AACA;AACA;AACAI,MAAM,CAAEZ,aAAa,CAACG,OAAD,CARa,CAAD,CAAnC,CAWA,MAAO,IAAMc,CAAAA,KAAK,CAAGnB,cAAc,CAAC,CAClCoB,OAAO,CAAEL,WADyB,CAElCM,UAAU,CAAE,CAACR,cAAD,CAAiBP,aAAjB,CAAgCQ,MAAhC,CAFsB,CAAD,CAA5B,CAKPD,cAAc,CAACS,GAAf,CAAmBX,QAAnB,EACAE,cAAc,CAACS,GAAf,CAAmBV,aAAnB,EACA;AACA;AAEA,cAAeO,CAAAA,KAAf","sourcesContent":["import { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport history from 'common/history';\nimport { apiMiddleware } from 'redux-api-middleware';\nimport notifications from 'components/Notifier/reducer';\nimport finalForm from 'common/util/finalFormDuck';\nimport authReducer from 'containers/Auth/authSlice';\nimport therapistReducer from 'containers/Therapist/therapistSlice';\n// import customerReducer from 'containers/Customers/customerSlice';\n// import policiesReducer from 'containers/Policies/policiesSlice';\n// import usersReducer from 'containers/Users/usersSlice';\nimport authSaga from 'containers/Auth/saga';\nimport therapistSaga from 'containers/Therapist/saga';\n// import customerSaga from 'containers/Customers/saga';\n// import policiesSaga from 'containers/Policies/saga';\n// import userSaga from 'containers/Users/saga';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst router = routerMiddleware(history);\n\nconst rootReducer = combineReducers({\n  finalForm,\n  notifier: notifications,\n  auth: authReducer,\n  therapist: therapistReducer,\n  // customer: customerReducer,\n  // policy: policiesReducer,\n  // user: usersReducer,\n  router: connectRouter(history),\n});\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: [sagaMiddleware, apiMiddleware, router],\n});\n\nsagaMiddleware.run(authSaga);\nsagaMiddleware.run(therapistSaga);\n// sagaMiddleware.run(policiesSaga);\n// sagaMiddleware.run(userSaga);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}